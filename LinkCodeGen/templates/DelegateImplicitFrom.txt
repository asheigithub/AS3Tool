		public class [classname] : NativeConstParameterFunction,IWapperDelegateMaker
		{
			public [classname]() : base(1)
			{
				para = new List<RunTimeDataType>();
				para.Add(RunTimeDataType.rt_function);

			}

			public override bool isMethod
			{
				get
				{
					return true;
				}
			}

			public override string name
			{
				get
				{
					return "[classname]";
				}
			}

			List<RunTimeDataType> para;
			public override List<RunTimeDataType> parameters
			{
				get
				{
					return para;
				}
			}

			public override RunTimeDataType returnType
			{
				get
				{
					return RunTimeDataType.rt_void;
				}
			}

			public override void execute3(RunTimeValueBase thisObj, FunctionDefine functionDefine, SLOT returnSlot, SourceToken token, StackFrame stackframe, out bool success)
			{

				try
				{
					var cls = ((ASBinCode.rtData.rtObjectBase)thisObj).value._class.instanceClass;
					if (argements[0].rtType == RunTimeDataType.rt_null)
					{
						stackframe.throwArgementException(token, "参数" + functionDefine.signature.parameters[0].name + "不能为null");
						success = false;
					}
					else
					{
						var action = MakeWapper(argements[0], stackframe.player, cls);

						((StackSlot)returnSlot).setLinkObjectValue(cls, stackframe.player, ([delegatetype])action);

						success = true;
					}

				}
				catch (ASRunTimeException ex)
				{
					success = false;
					stackframe.throwError(token, 9998, ex.ToString());
				}
				catch (InvalidCastException ic)
				{
					success = false;
					stackframe.throwAneException(token, ic.Message);
				}
				catch (ArgumentException a)
				{
					success = false;
					stackframe.throwAneException(token, a.Message);
				}
				catch (IndexOutOfRangeException i)
				{
					success = false;
					stackframe.throwAneException(token, i.Message);
				}
				catch (NotSupportedException n)
				{
					success = false;
					stackframe.throwAneException(token, n.Message);
				}

			}

			public Delegate MakeWapper(ASBinCode.RunTimeValueBase function, Player player, ASBinCode.rtti.Class cls)
			{
				var action = player.WapperFunctionDelegate(function, cls, typeof([delegatetype]),
					(wapper)=> {
						

						[delegatetype] actionwapper = ([invokeparam]) =>
						{
							[return]wapper.Invoke([invokeparam]);
						};

						wapper.action = actionwapper;
						
					});

				

				return action;

			}
		}
