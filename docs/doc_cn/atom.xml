<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Apple Juice</title>
  
  
  <link href="/apple-juice-actionscript/doc_cn/atom.xml" rel="self"/>
  
  <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/"/>
  <updated>2018-04-12T10:42:52.962Z</updated>
  <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/</id>
  
  <author>
    <name>asheigithub</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity交互性能和Lua的对比</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-4-0-slua-applejuice-2018-04-12/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-4-0-slua-applejuice-2018-04-12/</id>
    <published>2018-04-12T10:15:43.000Z</published>
    <updated>2018-04-12T10:42:52.962Z</updated>
    
    <content type="html"><![CDATA[<p>网络上有一篇主要关于Unity交互的Lua方案的性能对比测试。<br><a href="https://zhuanlan.zhihu.com/p/22673880" title="Lua测试" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/22673880</a></p><p>AppleJuice也进行了一次此测试。测试平台为手机 魅族Note5。对比对象为SLUA 1.5.5。双方均使用il2cpp打包。</p><blockquote><p>AppleJuice是C#代码，因此在UnityEditor中测试结果不准确，需要发布到手机实测，或者发布为PC的exe,才能实际测试性能。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">package</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> flash.system.System;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> system.DateTime;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> system.TimeSpan;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> unityengine.GameObject;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> unityengine.Transform;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> unityengine.Vector3;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * @author </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Perf</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> cube:GameObject = <span class="keyword">new</span> GameObject(<span class="string">"Script cube"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Perf</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Test1</span><span class="params">()</span>:void</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> d:DateTime = DateTime.now;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transform:Transform = cube.transform;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">transform.position = transform.position;</span><br><span class="line">&#125;</span><br><span class="line">trace(  TimeSpan (DateTime.now-d).totalMilliseconds );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Test2</span><span class="params">()</span>:void</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> d:DateTime = DateTime.now;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> transform:Transform = cube.transform;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">transform.rotate____(Vector3.up, <span class="number">90</span>);</span><br><span class="line">&#125;</span><br><span class="line">trace(  TimeSpan (DateTime.now-d).totalMilliseconds );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Test3</span><span class="params">()</span>:void</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> d:DateTime = DateTime.now;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">2000000</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> v:Vector3 =<span class="keyword">new</span> Vector3(i,i,i)</span><br><span class="line">Vector3.normalize(v)</span><br><span class="line">&#125;</span><br><span class="line">trace(  TimeSpan (DateTime.now-d).totalMilliseconds );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Test4</span><span class="params">()</span>:void</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> d:DateTime = DateTime.now;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> v:GameObject = GameObject.constructor_();</span><br><span class="line">&#125;</span><br><span class="line">trace(  TimeSpan (DateTime.now-d).totalMilliseconds );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> transform = cube.transform</span><br><span class="line"><span class="keyword">local</span> start = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">200000</span> <span class="keyword">do</span></span><br><span class="line">        transform.position=transform.position</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"test1/lua "</span> .. (<span class="built_in">os</span>.<span class="built_in">clock</span>() - start));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> transform=cube.transform</span><br><span class="line"><span class="keyword">local</span> start = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">200000</span> <span class="keyword">do</span></span><br><span class="line">transform:Rotate(Vector3.up, <span class="number">90</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"test2/lua "</span> .. (<span class="built_in">os</span>.<span class="built_in">clock</span>() - start));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> start = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">2000000</span> <span class="keyword">do</span> </span><br><span class="line"><span class="keyword">local</span> v = Vector3(i,i,i)</span><br><span class="line">Vector3.Normalize(v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"test3/lua "</span> .. (<span class="built_in">os</span>.<span class="built_in">clock</span>() - start));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test4</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> t = cube.transform</span><br><span class="line"><span class="keyword">local</span> v = Vector3.one</span><br><span class="line"><span class="keyword">local</span> start = <span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">200000</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">local</span> v = GameObject()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"test4/lua "</span> .. (<span class="built_in">os</span>.<span class="built_in">clock</span>() - start));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="以下为测试结果-单位为秒。越小越好"><a href="#以下为测试结果-单位为秒。越小越好" class="headerlink" title="以下为测试结果 单位为秒。越小越好"></a>以下为测试结果 单位为秒。越小越好</h4><ol><li>test1 slua 1.09  apple juice 1.14</li><li>test2 slua 2.57  apple juice 1.84</li><li>test3 slua 0.058 apple juice 25.9 <blockquote><p>test3 实际上slua并没有和unity交互，因此这个测试不适于评估。</p></blockquote></li><li>test4 slua 7.25  apple juice 4.128</li></ol><p><img src="/apple-juice-actionscript/doc_cn/images/slua_applejuice_perf.jpg" alt="结果截图说明"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络上有一篇主要关于Unity交互的Lua方案的性能对比测试。&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22673880&quot; title=&quot;Lua测试&quot; rel=&quot;external nofollow noopener noreferr
      
    
    </summary>
    
      <category term="2_advuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/"/>
    
      <category term="2_3performance" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/2-3performance/"/>
    
    
  </entry>
  
  <entry>
    <title>性能提示</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-3-0-performanceintro-2018-04-11/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-3-0-performanceintro-2018-04-11/</id>
    <published>2018-04-11T04:09:29.000Z</published>
    <updated>2018-04-11T08:06:38.050Z</updated>
    
    <content type="html"><![CDATA[<p>Apple Juice脚本引擎本身对于结构体和C#的互操作等作了非常多的优化。但是，由于ActionScript3作为一门事实上的动态语言，因此还是有必要注意一些性能优化的注意点。</p><ol><li>变量类型：ActionScript3有编译时类型检查功能。如果编译时提供具体的变量类型，则能大幅提高运行性能。因为运行时将无需假设变量的类型，而直接使用最快的执行代码。如果不指定变量类型，则根据规则这个变量是个任意类型的变量。因此运行时将必须在运行时进行类型检查。</li><li>函数和对象方法：ActionScript3既可以使用和JS类似的函数，也可用和java类似的对象的方法。区别在于，对象的方法是绑定于对象的，它的this指针无法改变。而函数的this指针却是可以改变的。因此运行时在处理函数（包括匿名函数，闭包等等）的时候，不得不经常重新绑定函数的this。而方法则无此开销。</li><li>final的方法：类型的方法如果没有final修饰，同时类型本身也没有被final修饰，则说明它可能被子类覆盖。这样运行时在调用时，将不得不检查实际的对象类型来查找虚方法。如果可以是用final修饰对象，则可以避免虚方法查找。</li><li>dynamic的类型：用dynamic修饰的类型，可以在运行时动态的增加，删除对象的成员。但是代价就是更多的内存开销和较慢的执行速度，因为运行时将不得不动态查找成员。</li><li>prototype原型链：ActionScript3作为EcmaScript4,确实支持原型链系统。原型链可以动态的给类型的所有实例动态的添加方法和成员，但是同样的，原型链将导致运行时必须到原型链中进行查找，引起性能降低。</li></ol><blockquote><p>纵上所述，尽量避免使用方便的动态语言特性，使用强类型和类继承系统。<br>最后最重要的一点，鉴于脚本引擎无论如何不可能达到C#宿主的性能，因此，将不会改变的部分放在C#中，导出为API是最好的选择。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apple Juice脚本引擎本身对于结构体和C#的互操作等作了非常多的优化。但是，由于ActionScript3作为一门事实上的动态语言，因此还是有必要注意一些性能优化的注意点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量类型：ActionScript3有编译时类型检查功能。如果编译
      
    
    </summary>
    
      <category term="2_advuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/"/>
    
      <category term="2_3performance" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/2-3performance/"/>
    
    
  </entry>
  
  <entry>
    <title>继承的原理</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-1-9-extendsprinciple-2018-04-10/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-1-9-extendsprinciple-2018-04-10/</id>
    <published>2018-04-10T10:03:37.000Z</published>
    <updated>2018-04-10T10:55:26.175Z</updated>
    
    <content type="html"><![CDATA[<p>Apple Juice允许您在ActionScript3中继承并扩展C#的基类。这个特性通过以下方式实现：  </p><ul><li>当导出API时，当导出工具发现某个类型可以被脚本继承时，将会自动创建一个这个类型的适配器类型。此适配器类型继承自此类型，并且还可以和脚本交互。作为一个桥梁的形式存在。</li><li>当ActionScript3引擎创建脚本中继承基类的对象时，实际上同时创建了这个适配器和AS3脚本对象两个对象。这两个对象互相绑定，当传给.net系统时，实际上是用的是这个适配器，当在脚本系统中使用时，则是操作AS3脚本对象。</li><li>Apple Juice代码中定义了如下接口：  </li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 标记这是一个可以跨脚本语言继承的对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICrossExtendAdapter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetAS3RuntimeEnvironment</span>(<span class="params">Player player, ASBinCode.rtti.Class typeclass, ASBinCode.rtData.rtObjectBase bindAS3Object</span>)</span>;</span><br><span class="line"></span><br><span class="line">ASBinCode.rtti.Class AS3Class &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">ASBinCode.rtData.rtObjectBase AS3Object &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>所有适配器都会实现这个接口。当ActionScript3引擎创建适配器实例后，会调用SetAS3RuntimeEnvironment方法，将对应的AS3脚本对象以及脚本引擎传入进来。此适配器会保存它们，以备交互时使用。</li><li>适配器能覆盖基类的方法，然后适配器又能和脚本交互，以决定具体使用哪个版本的方法。</li></ul><h4 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h4><p>以上一章的Shape为例，来具体讲解这个适配器是如何起作用的。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class extendtest_ShapeAdapter :extendtest.Shape ,ASRuntime.ICrossExtendAdapter</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ASBinCode.rtti.Class AS3Class &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> typeclass; &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ASBinCode.rtData.rtObjectBase AS3Object &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> bindAS3Object; &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Player player;</span><br><span class="line"><span class="keyword">private</span> Class typeclass;</span><br><span class="line"><span class="keyword">private</span> ASBinCode.rtData.rtObjectBase bindAS3Object;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetAS3RuntimeEnvironment</span>(<span class="params">Player player, Class typeclass, ASBinCode.rtData.rtObjectBase bindAS3Object</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.player = player;</span><br><span class="line"><span class="keyword">this</span>.typeclass = typeclass;</span><br><span class="line"><span class="keyword">this</span>.bindAS3Object = bindAS3Object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">extendtest_ShapeAdapter</span>(<span class="params"></span>):<span class="title">base</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> ASBinCode.rtData.rtFunction _as3function_0;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> _as3functionId_0 =<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> System.<span class="function">Double <span class="title">area</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_as3function_0 == <span class="literal">null</span>)</span><br><span class="line">_as3function_0 = (ASBinCode.rtData.rtFunction)player.getMethod(bindAS3Object, <span class="string">"area"</span>);</span><br><span class="line"><span class="keyword">if</span> (_as3functionId_0 == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">_as3functionId_0 = ((ClassMethodGetter)typeclass.getBaseLinkSystemClass().classMembers.FindByName(<span class="string">"area"</span>).bindField).functionId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_as3function_0 != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">(player == <span class="literal">null</span> || (player != <span class="literal">null</span> &amp;&amp; NativeConstParameterFunction.checkToken(</span><br><span class="line"><span class="keyword">new</span> NativeConstParameterFunction.ExecuteToken(</span><br><span class="line">player.ExecuteToken.tokenid, _as3functionId_0</span><br><span class="line">)</span><br><span class="line">))</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">base</span>.area();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (System.Double)player.InvokeFunction(_as3function_0,<span class="number">0</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个extendtest_ShapeAdapter，继承自extendtest.Shape,同时实现了ASRuntime.ICrossExtendAdapter接口。  </p><ol><li>player 成员保存播放器对象</li><li>typeclass 成员保存ActionScript3对象的Class</li><li>bindAS3Object 成员保存ActionScript3对象。</li></ol><p>extendtest_ShapeAdapter覆盖extendtest.Shape的area方法。这个方法作为调用的桥梁。它判断究竟要调用脚本中的覆盖的方法还是调用基类的方法。当此方法第一次执行时，首先查找脚本中的子类中的对应方法。如果没有找到，则直接调用基类的方法。</p><ol><li>如果此方法是被脚本引擎调用的，则有可能是脚本中调用了基类的方法。脚本引擎在每次调用本地对象前，都会发出一个令牌。在这种情况下，先检测令牌是否匹配，如果匹配，则调用父类的方法。</li><li>如果此方法是被C#代码调用的，如果子类中有对应的方法。则调用脚本引擎，执行子类中覆盖的方法。</li><li>如果是由C#代码发起调用，脚本引擎执行子类方法，子类又调用父类方法时，则令牌生效，这样即可正确判断使用父类版本或者脚本覆盖版本。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apple Juice允许您在ActionScript3中继承并扩展C#的基类。这个特性通过以下方式实现：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当导出API时，当导出工具发现某个类型可以被脚本继承时，将会自动创建一个这个类型的适配器类型。此适配器类型继承自此类型，并且还可以和脚本
      
    
    </summary>
    
      <category term="2_advuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/"/>
    
      <category term="2_2adv" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/2-2adv/"/>
    
    
  </entry>
  
  <entry>
    <title>关于MonoBehaviour</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-2-0-monobehaviour-2018-04-10/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-2-0-monobehaviour-2018-04-10/</id>
    <published>2018-04-10T09:54:32.000Z</published>
    <updated>2018-04-10T11:40:05.161Z</updated>
    
    <content type="html"><![CDATA[<p>上一章描述的脚本继承，可以自动处理那些用new关键字在脚本中创建实例的情况。但是，某些类型却无法使用new关键字创建，它们或者需要某些工厂方法创建，或者使用new关键字会报错。Unity中，这样的典型对象有Component类型。MonoBehaviour是其中的典型，它必须使用GameObject.AddComponent等方法创建。本章描述如何处理这种情况。<br>代码创建工具会帮我们创建好GameObject.AddComponent的API的大部分代码。并且已经注册到脚本引擎中。我只需将它拷贝一份出来，在它基础上进行一些修改，然后覆盖之前注册的代码即可。<br>使用CSWC对象的regNativeFunction(NativeFunctionBase nativefunction, bool isReplace)方法注册本地代码，并且可以指定是否覆盖。  </p><h4 id="处理Component"><a href="#处理Component" class="headerlink" title="处理Component"></a>处理Component</h4><ol><li>首先我们到自动生成的API代码中，找到 unityengine_GameObject_buildin 这个类。这个类内定义了unityengine_GameObject_addComponent嵌套类。这个嵌套类就是GameObject.AddComponet的API代码。</li><li>我们新建一个叫GameObject_addComponent的类，然后将unityengine_GameObject_addComponent的代码拷贝到新的类型里去，并修改错误。</li><li>execute3方法，就是实际调用GameObject.AddComponent的地方。我们在AddComponent调用后，如果生成的对象是一个适配器对象，则继续完成适配器的初始化工作。只需在后面添加如下代码即可:  </li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ICrossExtendAdapter crossExtendAdapter = _result_ <span class="keyword">as</span> ICrossExtendAdapter;</span><br><span class="line"><span class="keyword">if</span> (crossExtendAdapter != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">ASBinCode.rtti.Class as3class = ((ASBinCode.rtData.rtObjectBase)argements[<span class="number">0</span>]).<span class="keyword">value</span>._class;</span><br><span class="line">stackframe.player.MakeICrossExtendAdapterEnvironment(crossExtendAdapter, as3class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将此方法注册到脚本引擎中。  </li></ol><p>这样，即可正确生成可在脚本中使用的Component类型。</p><h4 id="处理MonoBehaviour"><a href="#处理MonoBehaviour" class="headerlink" title="处理MonoBehaviour"></a>处理MonoBehaviour</h4><p>MonoBehaviour是Component的子类。因此，经过以上处理，已经可以通过脚本挂载从脚本中定义的MonoBehaviour子类。但是，MonoBehaviour非常特殊，Unity会根据MonoBehaviour中是否定义有例如Update等方法来根据实际调用这些方法。这些方法不是virtual的，因此MonoBehaviour的适配器也需要特殊处理。</p><ol><li>如前那样，从自动生成的代码中找到unityengine_MonoBehaviour_buildin，然后找到unityengine_MonoBehaviourAdapter和_unityengine_MonoBehaviourAdapter_ctor，将他们的代码复制到新建的类型里去。</li><li>MonoBehaviourAdapter_ctor 中有new MonoBehaviourAdapter() 的操作，将它删除，因为MonoBehaviour不会通过new创建</li><li>修改MonoBehaviourAdapter的代码。在里面定义Update方法，然后将它转发到脚本系统中。代码如下:  </li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> ASBinCode.rtData.rtFunction _Update;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> _Update_hasfound;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!_Update_hasfound)</span><br><span class="line">&#123;</span><br><span class="line">_Update = (ASBinCode.rtData.rtFunction)player.getMethod(bindAS3Object, <span class="string">"Update"</span>);</span><br><span class="line">_Update_hasfound = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_Update == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">player.InvokeFunction(_Update, <span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将代码注册到系统中。</li></ol><p>如此，在脚本中定义的MonoBehaviour即可正确处理Update。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>Apple Juice系统自带脚本中已经处理好常用MonoBehaviour的情况，包括AddComponent,GetComponent系列等，有些MonoBehaviour事件未实现，例如OnAnimatorIK等等，如果有需要，可以仿照实现。这部分代码在GObj_Special中。  </p><blockquote><p>在脚本中可以执行SendMessage，给自定义的MonoBehaviour发送消息。这部分系统已处理，但是，<strong>无法</strong>从C#给脚本中定义的MonoBehaviour子类用SendMessage发送消息。因为MonoBehaviourAdapter中，不可能预知会有哪些方法名，因此，C#中直接用SendMessage是无法调用脚本中的方法的。如果确实需要，则需要调用<br>MonoBehaviourAdapter中的<br>internal bool F6554FF96D0D340948D3DCD4AA9225CCD(string arg0, object arg1, SendMessageOptions arg2)方法。其中arg0是方法名，arg1是参数。这是MonoBehaviourAdapter处理脚本中SendMessage的方法。可以直接通过它发送消息</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一章描述的脚本继承，可以自动处理那些用new关键字在脚本中创建实例的情况。但是，某些类型却无法使用new关键字创建，它们或者需要某些工厂方法创建，或者使用new关键字会报错。Unity中，这样的典型对象有Component类型。MonoBehaviour是其中的典型，它必
      
    
    </summary>
    
      <category term="2_advuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/"/>
    
      <category term="2_2adv" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/2-2adv/"/>
    
    
  </entry>
  
  <entry>
    <title>进阶概述</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-0-0-advoverview-2018-03-28/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-0-0-advoverview-2018-03-28/</id>
    <published>2018-03-28T09:05:16.000Z</published>
    <updated>2018-03-28T09:18:06.367Z</updated>
    
    <content type="html"><![CDATA[<p>除了基本使用，Apple Juice脚本系统还提供了更多的扩展。例如，可以从脚本中继承Unity中定义的类库，并且还可以扩充它的属性，甚至还可以使用override，重新定义基类的某些行为，无论基类是ActionScript3中定义的，还是用C#定义的。</p><blockquote><p>在绝大多数情况下，脚本的执行效率总是不如宿主的效率。因此我们可以将一些基础功能制作成类库，放在宿主中以获得最高的执行效率。除了其他常规脚本系统的常见方式外，Apple Juice可以将宿主中的类当作ActionScript3的基类，使用继承与多态来获得更灵活的交互。</p></blockquote><p>Apple Juice是以代码形式提供的插件，因此您还可扩充它的功能，比如自定义内置函数，或者定制API的导出代码等等。本章节会讨论这些内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;除了基本使用，Apple Juice脚本系统还提供了更多的扩展。例如，可以从脚本中继承Unity中定义的类库，并且还可以扩充它的属性，甚至还可以使用override，重新定义基类的某些行为，无论基类是ActionScript3中定义的，还是用C#定义的。&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
      <category term="2_advuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/"/>
    
    
  </entry>
  
  <entry>
    <title>脚本继承</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-1-0-extends-2018-03-28/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/2-1-0-extends-2018-03-28/</id>
    <published>2018-03-28T09:01:19.000Z</published>
    <updated>2018-03-28T10:27:41.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是指一种代码重用的形式，允许基于现有类开发新类。现有类通常称为基类 或超类，新类通常称为子类。继承的主要优势是，允许重复使用基类中的代码，但不修改现有代码。此外，继承不要求改变其它类与基类交互的方式。不必修改可能已经过彻底测试或可能已被使用的现有类，使用继承可将该类视为一个集成模块，可使用其它属性或方法对它进行扩展。因此，您使用 extends 关键字指明类从另一类继承。<br>通过继承还可以在代码中利用多态。有一种方法在应用于不同数据类型时会有不同行为，多态就是对这样的方法应用一个方法名的能力。</p><hr><p>如前所述，我们可以在宿主(Unity)工程中定义基类，然后在脚本中扩展它或者修改它。<br>我们在Unity中定义一个名为 Shape 的基类就是一个简单的示例，该类有名为 Circle 和 Square 的两个子类。Shape 类定义了名为 area() 的方法，该方法返回形状的面积。如果已实现多态，则可以对 Circle 和 Square 类型的对象调用 area() 方法，然后执行正确的计算。使用继承能实现多态，实现的方式是允许子类继承和重新定义或覆盖 基类中的方法。我们可以在宿主工程中创建Circle类，在ActionScript3工程中创建Square类。  </p><ol><li>打开Unity工程，在Assets目录中创建一个C#脚本。  <img src="/apple-juice-actionscript/doc_cn/images/2-1-0/s1.jpg" alt="创建脚本"></li><li><p>将如下代码写入脚本中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">extendtest</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">double</span>.NaN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">area</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Mathf.PI * (radius * radius));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开ActionScript3工程，使用bat/CreateUnityAPI.bat将刚才写的代码导出API。  <img src="/apple-juice-actionscript/doc_cn/images/2-1-0/s2.jpg" alt="导出API"></p></li><li>打开Main.as。在Main.as底部，最后一个}后面写下如下代码:<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> extendtest.Circle;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> extendtest.Shape;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们在ActionScript3中继承Shape,并且覆盖它的area方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> side:Number = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span><span class="params">()</span>:Number </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (side * side); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> cir:Circle = <span class="keyword">new</span> Circle(); </span><br><span class="line">trace(<span class="string">"Circele:"</span>,cir.area()); <span class="comment">// output: 3.141592653589793 </span></span><br><span class="line"><span class="keyword">var</span> sq:Square = <span class="keyword">new</span> Square(); </span><br><span class="line">trace(<span class="string">"Square:"</span>, sq.area());  <span class="comment">// output: 1</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>由于某些未知原因，在Unity工程中定义的类型，如果使用 abstract 定义为抽象类，导出工具在分析Assembly-CSharp.dll时，无非正确的得到它是抽象类这个信息。因此，不要在Unity工程中用抽象类定义API。</p></blockquote><ol><li>点击编译。将代码发布到Unity。</li><li>在Unity总执行场景，可以看到运行结果。其中，Circele是在Unity中定义，而Shape却是在脚本中定义的。  <img src="/apple-juice-actionscript/doc_cn/images/2-1-0/s3.jpg" alt="导出API"></li></ol><blockquote><p>在Main.as底部，包体的外部写下代码，在ActionScript3中称为包外代码，在这里定义的类型叫包外类。这些代码会在Main第一次被实例化前被调用。在这里添加代码是一个方便的测试方式，Apple Juice也同样实现了这个ActionScript3的语言特性。</p></blockquote><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>某些类型没有构造函数，或者它们的使用方式比较特殊，是使用某种类似工厂的方法创建的。最典型的例子就是MonoBehaviour。对于这些特殊的类型，如果要在脚本中继承，则还需要一些额外的处理。后面的章节将讲述原理和解决方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;继承是指一种代码重用的形式，允许基于现有类开发新类。现有类通常称为基类 或超类，新类通常称为子类。继承的主要优势是，允许重复使用基类中的代码
      
    
    </summary>
    
      <category term="2_advuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/"/>
    
      <category term="2_2adv" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/2-advuse/2-2adv/"/>
    
    
  </entry>
  
  <entry>
    <title>Demo工程介绍</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-9-2-unitydemointro-2018-03-27/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-9-2-unitydemointro-2018-03-27/</id>
    <published>2018-03-27T07:49:37.000Z</published>
    <updated>2018-03-27T10:14:17.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Unity部分"><a href="#Unity部分" class="headerlink" title="Unity部分"></a>Unity部分</h3><p>打开HotFixDemoScene1.scene场景，就能看到示例工程。本示例工程介绍了怎样使用ActionScript3执行逻辑。<br>总体而言，要在Unity项目中执行ActionScript3,需要以下几个步骤：</p><ol><li>创建ActionScript3运行时。</li><li>加载ActionScript3字节码。</li><li>创建ActionScript3的入口对象。</li><li>调用 或者每帧都调用一次刚才创建的ActionScript3对象的某个方法。</li></ol><h4 id="创建ActionScript3运行时"><a href="#创建ActionScript3运行时" class="headerlink" title="创建ActionScript3运行时"></a>创建ActionScript3运行时</h4><p>首先需要创建一个ActionScript3的虚拟机。这个虚拟机可以实际执行ActionScript3代码。一般来说全局只需要一个，在任意需要执行ActionScrip3的地方都调用这个虚拟机来执行。<br>有两种方案，一种是将虚拟机保存在一个全局静态变量中，另一种是创建一个GameObject,使它一直存在于场景中。在这个GameObject上附加一个MonoBehaviour,让这个MonoBehaviour承载虚拟机。 可随时用GameObject.Find()来访问。<br>本Demo工程选用第二种方案。<br>在场景中有一个名叫AS3Player的GameObject。在下面挂载了ActionScriptStartUp.cs。ActionScriptStartUp是一个Monobehaviour。如前所述，此Monobehaviour承载了运行时，并且每帧都会调用ActionScript3的方法，以驱动逻辑更新。</p><p>以下代码可创建AS3运行时。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flashplayer = <span class="keyword">new</span> ASRuntime.Player();</span><br></pre></td></tr></table></figure></p><p>以下代码用以从二进制字节数组中加载as3代码。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_ANDROID</span></span><br><span class="line"></span><br><span class="line">WWW www = <span class="keyword">new</span> WWW(Application.streamingAssetsPath + <span class="string">"/hotfix.cswc"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">WWW www = <span class="keyword">new</span> WWW(<span class="string">"file:///"</span> + Application.streamingAssetsPath + <span class="string">"/hotfix.cswc"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">while</span> (!www.isDone)</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(www.error))</span><br><span class="line">UnityEngine.Debug.LogError(www.error);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载as3编译器生成的字节码。</span></span><br><span class="line"><span class="comment">//Loads the byte code generated by the compiler.</span></span><br><span class="line">ASBinCode.CSWC swc = ASBinCode.CSWC.loadFromBytes(www.bytes);</span><br><span class="line">www.Dispose();</span><br><span class="line"></span><br><span class="line">ASRuntime.nativefuncs.BuildInFunctionLoader.loadBuildInFunctions(swc);</span><br></pre></td></tr></table></figure><blockquote><p>字节码可以保存在任意地方，您也可以从网络下载字节码。</p></blockquote><p>以下代码开始加载API代码。由于可能导出了大量的API函数，因此加载时可以试用进度条。<br>使用协程功能，可以避免卡顿，和监测加载进度。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//**注册本地代码有可能非常之多。所以提供了一个进度条**</span></span><br><span class="line"><span class="comment">//API code can be very much. So a progress bar is provided</span></span><br><span class="line"><span class="keyword">int</span> functioncount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (regenumerator.MoveNext())</span><br><span class="line">&#123;</span><br><span class="line">functioncount++;</span><br><span class="line"><span class="keyword">if</span> (functioncount % <span class="number">50</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">progress.<span class="keyword">value</span> = extfunctions.progress;</span><br><span class="line">progressValue.text = <span class="string">"loading:"</span> + extfunctions.progress * <span class="number">100</span> + <span class="string">"%"</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，需要让运行时加载二进制字节码，用以下代码进行加载:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flashplayer.loadCode(swc);</span><br></pre></td></tr></table></figure><p>当运行时加载完成字节码后，即可调用运行时的一些方法，来对ActionScript3代码进行操作。<br>例如，createInstance()可用来创建一个ActionScript3对象，getMethod则可以访问对象的某个方法，等等。<br>我们创建 Main.as 的一个对象实例，然后找到它的update方法，并保存起来。每帧都执行一次此实例的update方法，即可推动逻辑更新。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main = flashplayer.createInstance(<span class="string">"Main"</span>);</span><br><span class="line">updatemethod= flashplayer.getMethod(main, <span class="string">"update"</span>);</span><br></pre></td></tr></table></figure><p>在MonoBehaviour的Update()方法中，调用运行时驱动ActionScript3代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (player != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">player.invokeMethod(main, updatemethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ActionScript3部分"><a href="#ActionScript3部分" class="headerlink" title="ActionScript3部分"></a>ActionScript3部分</h3><p>现在我们来看ActionScript3部分的代码。<br>本Demo的逻辑功能都定义在Main类中。当上面创建Main的实例时，构造函数将会被调用。<br>构造函数中，创建了100个立方体到场景中。<br>然后，给场景中的按钮追加事件处理函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cube:UObject = GameObject.find(<span class="string">"Cube"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> c2:GameObject = GameObject.createPrimitive( PrimitiveType.Cube); <span class="comment">//UObject.instantiate__(cube) as GameObject;</span></span><br><span class="line">MeshRenderer( c2.getComponent(MeshRenderer)).material = MeshRenderer( GameObject( cube).getComponent(MeshRenderer)).material;</span><br><span class="line"></span><br><span class="line">c2.transform.position = <span class="keyword">new</span> Vector3( Random.range(<span class="number">-5</span>,<span class="number">5</span>),Random.range(<span class="number">0</span>,<span class="number">5</span>),Random.range(<span class="number">-5</span>,<span class="number">5</span>) );</span><br><span class="line"></span><br><span class="line">cubes.push(c2);</span><br><span class="line"></span><br><span class="line">mvs.push( <span class="keyword">new</span> Vector3(Random.range( <span class="number">-5</span>, <span class="number">5</span>), Random.range(<span class="number">-5</span>, <span class="number">5</span>), Random.range( <span class="number">-5</span>, <span class="number">5</span>)) );</span><br><span class="line">mvs[mvs.length - <span class="number">1</span>].normalize();</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (i &gt; 10)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//c2.setActive(false);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn:Button = Button( GameObject.find(<span class="string">"Button"</span>).getComponent(Button));</span><br><span class="line"></span><br><span class="line">btn.onClick.addListener(</span><br><span class="line">onclick</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Main类有实例方法update。在Unity工程中，每帧都会驱动此方法，这个方法更新立方体们的位置。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span>:void</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isstop)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cube:GameObject = cubes[i];</span><br><span class="line"><span class="keyword">var</span> v:Vector3 = mvs[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vv:Vector3 = <span class="keyword">new</span> Vector3(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">cube.transform.localPosition += v * Time.deltaTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p:Vector3 = cube.transform.localPosition;</span><br><span class="line"><span class="keyword">if</span> (p.x &lt;<span class="number">-5</span> || p.y &lt; <span class="number">-5</span> || p.z &lt; <span class="number">-5</span> || p.x &gt; <span class="number">5</span> || p.y &gt; <span class="number">5</span> || p.z &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">mvs[i] =-mvs[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var k:NavMesh;</span></span><br><span class="line"><span class="comment">//k = cube;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以点击场景中的按钮，观察事件的处理。</p><blockquote><p>update方法中，可以看到使用了大量的new Vector3操作。由于Vector3是一个结构体。在C#中，方法内部new结构体不会导致GC。<br>Apple Juice 脚本引擎同样实现了这个效果，因此，update代码是不会导致内存分配的。  </p></blockquote><p><img src="/apple-juice-actionscript/doc_cn/images/unitydemointro/nogc.jpg" alt="nogc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Unity部分&quot;&gt;&lt;a href=&quot;#Unity部分&quot; class=&quot;headerlink&quot; title=&quot;Unity部分&quot;&gt;&lt;/a&gt;Unity部分&lt;/h3&gt;&lt;p&gt;打开HotFixDemoScene1.scene场景，就能看到示例工程。本示例工程介绍了怎样使用Ac
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_3unityproj" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-3unityproj/"/>
    
    
  </entry>
  
  <entry>
    <title>Apple Juice Unity插件</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-9-1-unityplugin-2018-03-21/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-9-1-unityplugin-2018-03-21/</id>
    <published>2018-03-21T11:40:02.000Z</published>
    <updated>2018-03-27T10:14:22.445Z</updated>
    
    <content type="html"><![CDATA[<p>Apple Juice 的Unity插件包提供了创建ActionScript3工程的功能以及其他一些功能，包括</p><ul><li>清除已生成的API代码</li><li>打开ActionScript3项目所在目录</li></ul><p>它在Unity中生成了一个顶级菜单”ASRuntime”,其他功能都在子菜单中。</p><h4 id="Set-up-the-ASRuntime-SDK"><a href="#Set-up-the-ASRuntime-SDK" class="headerlink" title="Set up the ASRuntime SDK"></a>Set up the ASRuntime SDK</h4><p>在工程中指定Applie Juice的SDK所在的路径。</p><h4 id="Create-ActionScript3-FlashDevelop-HotFixProject"><a href="#Create-ActionScript3-FlashDevelop-HotFixProject" class="headerlink" title="Create ActionScript3 FlashDevelop HotFixProject"></a>Create ActionScript3 FlashDevelop HotFixProject</h4><p>创建ActionScript3脚本工程。</p><h4 id="Open-ActionScript3-Project-Folder"><a href="#Open-ActionScript3-Project-Folder" class="headerlink" title="Open ActionScript3 Project Folder"></a>Open ActionScript3 Project Folder</h4><p>如果成功创建了脚本工程，或者打开过一次脚本工程所在目录，则可以记住上次打开的路径，为您打开脚本工程所在目录。</p><h4 id="Clean-API-Code"><a href="#Clean-API-Code" class="headerlink" title="Clean API Code"></a>Clean API Code</h4><p>清除所有生成的API代码。如果这样做了，可以再次在脚本工程中重新生成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apple Juice 的Unity插件包提供了创建ActionScript3工程的功能以及其他一些功能，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清除已生成的API代码&lt;/li&gt;
&lt;li&gt;打开ActionScript3项目所在目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它在Unity中生成了
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_3unityproj" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-3unityproj/"/>
    
    
  </entry>
  
  <entry>
    <title>内容说明</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-9-0-useunityproj-2018-03-21/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-9-0-useunityproj-2018-03-21/</id>
    <published>2018-03-21T10:52:28.000Z</published>
    <updated>2018-03-27T10:15:26.992Z</updated>
    
    <content type="html"><![CDATA[<p>当插件导入后，Unity的工程目录为:</p><blockquote><p>Assets<br>├────── ASRuntimePlayer<br>│        ├─────Editor<br>│        │      ├──── ASRuntimeMenus.cs<br>│        │      └──── ASRuntimeSettings.cs<br>│        ├─────RegCode<br>│        ├─────Support<br>│        │      └──── extFunctions.cs<br>│        └─────ActionScriptStartUp.cs<br>├────── Standard Assets<br>│        └─────ASRuntime<br>│               ├──── AS3VM<br>│               └──── ScriptSupport<br>│                      └──── Generated<br>├────── StreamingAssets<br>│        └─────hotfix.cswc<br>├────── HotFixDemoScene1.unity<br>└────── link.xml             </p></blockquote><h4 id="HotFixDemoScene1-unity"><a href="#HotFixDemoScene1-unity" class="headerlink" title="HotFixDemoScene1.unity"></a>HotFixDemoScene1.unity</h4><p>Demo示例场景。</p><h4 id="hotfix-cswc"><a href="#hotfix-cswc" class="headerlink" title="hotfix.cswc"></a>hotfix.cswc</h4><p>ActionScript3脚本编译后生成的二进制字节码文件。</p><h4 id="ASRuntimePlayer-Editor"><a href="#ASRuntimePlayer-Editor" class="headerlink" title="ASRuntimePlayer/Editor"></a>ASRuntimePlayer/Editor</h4><p>Unity插件代码目录。</p><h4 id="ASRuntimePlayer-RegCode"><a href="#ASRuntimePlayer-RegCode" class="headerlink" title="ASRuntimePlayer/RegCode"></a>ASRuntimePlayer/RegCode</h4><p>包含如下2类文件：</p><ul><li>生成API时，自动生成的一个注册所有API函数的代码文件。</li><li>那些在Unity工程中并且不在Standard Assets目录中定义的类库，当导出API代码时，将会生成到这个目录下。  </li></ul><h4 id="Standard-Assets-ASRuntime-ScriptSupport-Generated"><a href="#Standard-Assets-ASRuntime-ScriptSupport-Generated" class="headerlink" title="Standard Assets/ASRuntime/ScriptSupport/Generated"></a>Standard Assets/ASRuntime/ScriptSupport/Generated</h4><p>自动导出的API代码将会生成到这里。</p><blockquote><p>Unity会自动编译工程目录中的代码。在Standard Assets目录下的代码会首先被编译，生成一个Assembly-CSharp-firstpass.dll。<br>其他目录下的代码将编译生成一个Assembly-CSharp.dll。<br>Standard Assets目录下的代码，无法引用其他目录下的代码。如果在Standard Assets 目录中保存导出的API,则可以避免API频繁的编译，因为这部分代码是不经常变动的。虽然导出的API可能很多，编译速度慢，但是放在这个目录下，只需编译一次，不会经常改变。<br>因此将Unity工程内自定义的类库导出的API放在“ASRuntimePlayer/RegCode”中，其他API放在Standard Assets/ASRuntime/ScriptSupport/Generated中，可以保证生成代码的引用关系正确，并且UnityEngine.dll导出的API不会频繁编译。</p></blockquote><h4 id="link-xml"><a href="#link-xml" class="headerlink" title="link.xml"></a>link.xml</h4><p>Unity在使用IL2CPP发布时，比如发布IOS包或者安卓选择IL2CPP发布时，会自动对Unity工程的DLL进行裁剪，将代码中没有引用到的类型裁剪掉，以达到减小发布后包体大小的目的。然而在实际使用过程中，很多类型可能被异常裁剪掉。link.xml可以配置哪些类型不会被裁剪。<br>Apple Juice 自动生成的API代码都在Assembly-CSharp-firstpass.dll或者Assembly-CSharp.dll中，因此，link.xml里默认配置了如下几处程序集不会被裁剪。如无意外，可不必修改此文件。如果您有其他的Dll库文件导出了API,那么您可以将此DLL的程序集配置到此文件中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linker</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"Assembly-CSharp"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"Assembly-CSharp-firstpass"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"UnityEngine"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"UnityEngine.UI"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"mscorlib"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linker</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当插件导入后，Unity的工程目录为:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assets&lt;br&gt;├────── ASRuntimePlayer&lt;br&gt;│        ├─────Editor&lt;br&gt;│        │      ├──── ASRuntimeMenu
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_3unityproj" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-3unityproj/"/>
    
    
  </entry>
  
  <entry>
    <title>使用自定义API</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-8-0-customapi-2018-03-21/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-8-0-customapi-2018-03-21/</id>
    <published>2018-03-21T09:27:43.000Z</published>
    <updated>2018-03-27T10:15:19.361Z</updated>
    
    <content type="html"><![CDATA[<p>您也可以在Unity工程中创建您自己的API代码。SDK中的工具LinkCodeGen.exe同样能将您自定义的类库导出为可与ActionScript3交互的API。再次说明要注意的是，只有Public的类型，并且处在某个命名空间下的类型才会被导出，否则是不会导出的。</p><h4 id="自定义API示例"><a href="#自定义API示例" class="headerlink" title="自定义API示例"></a>自定义API示例</h4><p>以下步骤演示如何自定义一个类库。</p><ol><li>打开Unity工程，在Assets目录下，右键菜单 “Create/C# Script”,创建一个TestAPI的脚本。</li><li>将TestAPI.cs的内容改为如下代码:</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">myapi</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestAPI</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">AddTest</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打开ActionScript3项目所在文件夹。(可点击菜单 “ASRuntime/Open ActionScript3 Project Folder” 来打开)</li><li>用FlashDevelop打开ActionScript3项目。</li><li>找到 “bat/CreateUnityAPI.bat”,单机右键，从弹出菜单中选择执行。等待API生成完毕。</li><li>打开Main.as，找到第100行左右的 onclick 方法。将它改为如下代码:</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">onclick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> testAPI:TestAPI = <span class="keyword">new</span> TestAPI();</span><br><span class="line">Text( GameObject.find(<span class="string">"Canvas/Text"</span>).getComponent(Text)).text = <span class="string">"100+50"</span> + testAPI.addTest(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//isstop = !isstop;</span></span><br><span class="line"><span class="comment">//trace("isstop?" , isstop);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Text( GameObject.find("Canvas/Text").getComponent(Text)).text = "isstop?" + isstop</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//+"我在AS3中热更"</span></span><br><span class="line"><span class="comment">//;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>点击编译。</li><li>回到Unity,点击运行，然后点击按钮，即可看到我们的API被成功调用了。</li></ol><p><img src="/apple-juice-actionscript/doc_cn/images/customapi/myapi1.jpg" alt="运行结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;您也可以在Unity工程中创建您自己的API代码。SDK中的工具LinkCodeGen.exe同样能将您自定义的类库导出为可与ActionScript3交互的API。再次说明要注意的是，只有Public的类型，并且处在某个命名空间下的类型才会被导出，否则是不会导出的。&lt;/p
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_2useas3" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-2useas3/"/>
    
    
  </entry>
  
  <entry>
    <title>.net API的导出</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-7-0-exportapi-2018-03-20/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-7-0-exportapi-2018-03-20/</id>
    <published>2018-03-20T12:04:22.000Z</published>
    <updated>2018-03-28T10:13:07.178Z</updated>
    
    <content type="html"><![CDATA[<p>.net API可以由SDK中的工具LinkCodeGen.exe进行导出。但是由于语言限制，某些类型是无法被导出的。</p><h4 id="不能被导出的类型"><a href="#不能被导出的类型" class="headerlink" title="不能被导出的类型"></a>不能被导出的类型</h4><ul><li>不在任何命名空间下的类型不会被导出。</li><li>标记为System.ObsoleteAttribute的类型。这些类型被标记为过时的，有可能导致编译失败。因此，工具检查到这样的类型或成员时，将不会导出.</li><li>System.Type类型。 System.Type类型和ActionScript3的Class有特殊关联,System.Type类型本身不会被导出。</li><li>非公开的类型和成员不会被导出。只有Public的类型才能导出。</li><li>泛型定义类型不会被导出。但是如果.net类库中有泛型类型，这个泛型类型是可以被导出的。例如 List&lt;T&gt; 本身是不会被导出的，但是如果.net类库中有List&lt;String&gt; 这样的类型，则List&lt;String&gt;会被自动处理。  </li><li>如果某个类型继承自不可导出的类型，那么它也同样不能导出。</li></ul><h4 id="不能被导出的成员"><a href="#不能被导出的成员" class="headerlink" title="不能被导出的成员"></a>不能被导出的成员</h4><ul><li>非公开的成员不会被导出。</li><li>如果某个方法的参数或者返回值是不能导出的类型，则它不会被导出。</li><li>如果某个成员被标记为System.ObsoleteAttribute的，则它不会被导出。</li><li>如果某个方法是泛型定义方法，则它不会被导出。但是泛型方法是可以被导出的。例如 MonoBehaviour.GetComponent<t>,这个方法不会被导出。但是如果某个类型继承了MonoBehaviour,又定义了 GetComponent<renderer>,则这个方法是可以被导出的。</renderer></t></li></ul><h4 id="导出时的特殊处理"><a href="#导出时的特殊处理" class="headerlink" title="导出时的特殊处理"></a>导出时的特殊处理</h4><ul><li>泛型类型导出时，名字改为 &lt;TypeName&gt; _Of_ &lt;GenericType&gt;。例如  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnityEngine.Events.UnityAction&lt;System.Boolean&gt;</span><br></pre></td></tr></table></figure><p>将导出为<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UnityAction_Of_Boolean</span> <span class="keyword">extends</span> <span class="title">system</span>.<span class="title">MulticastDelegate</span> <span class="keyword">implements</span> <span class="title">system</span>.<span class="title">ICloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>方法重载。.net支持重载，ActionScript3则不支持重载。因此，当遇到这样的情况时，工具将会在重载的函数后面加上一个下划线_。例如，System.DateTime.GetDateTimeFormats有若干重载，则会导出为如下API:  </li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* System.DateTime.GetDateTimeFormats</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.String[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_getDateTimeFormats];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">getDateTimeFormats</span><span class="params">()</span>:_Array_</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* System.DateTime.GetDateTimeFormats</span></span><br><span class="line"><span class="comment">*parameters:</span></span><br><span class="line"><span class="comment">*  provider : System.IFormatProvider</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.String[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_getDateTimeFormats_];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">getDateTimeFormats_</span><span class="params">(provider:IFormatProvider)</span>:_Array_</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* System.DateTime.GetDateTimeFormats</span></span><br><span class="line"><span class="comment">*parameters:</span></span><br><span class="line"><span class="comment">*  format : System.Char</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.String[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_getDateTimeFormats__];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">getDateTimeFormats__</span><span class="params">(format:Char)</span>:_Array_</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* System.DateTime.GetDateTimeFormats</span></span><br><span class="line"><span class="comment">*parameters:</span></span><br><span class="line"><span class="comment">*  format : System.Char</span></span><br><span class="line"><span class="comment">*  provider : System.IFormatProvider</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.String[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_getDateTimeFormats___];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">getDateTimeFormats___</span><span class="params">(format:Char,provider:IFormatProvider)</span>:_Array_</span>;</span><br></pre></td></tr></table></figure><ul><li>如果是构造函数重载，则保留找到的第一个构造函数，其他构造函数改名为constructor_。若有多个重载，则追加下划线。例如System.DateTime有许多构造函数，则导出为:  </li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*********构造函数*******</span></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor_];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor_</span><span class="params">(ticks:Int64,kind:DateTimeKind)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor__];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor__</span><span class="params">(year:int,month:int,day:int)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor___];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor___</span><span class="params">(year:int,month:int,day:int,calendar:system.globalization.Calendar)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor____];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor____</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor_____];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor_____</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int,kind:DateTimeKind)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor______];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor______</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int,calendar:system.globalization.Calendar)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor_______];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor_______</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int,millisecond:int)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor________];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor________</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int,millisecond:int,kind:DateTimeKind)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor_________];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor_________</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int,millisecond:int,calendar:system.globalization.Calendar)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_constructor__________];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">constructor__________</span><span class="params">(year:int,month:int,day:int,hour:int,minute:int,second:int,millisecond:int,calendar:system.globalization.Calendar,kind:DateTimeKind)</span>:DateTime</span>;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">native</span>,system_DateTime_ctor];</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">DateTime</span><span class="params">(ticks:Int64)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>操作符重载。 .net支持操作符重载。对于这样的类型，导出后同样保留了可用的操作符重载。例如System.Decimal,导出后保留了各种操作符重载，在脚本中同样可用。  </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算 d1 % d2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="keyword">native</span>,static_system_Decimal_op_Modulus];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">op_Modulus</span><span class="params">(d1:Decimal,d2:Decimal)</span>:Decimal</span>;</span><br><span class="line"></span><br><span class="line">[operator,<span class="string">"%"</span>];</span><br><span class="line">[<span class="keyword">native</span>,static_system_Decimal_op_Modulus];</span><br><span class="line">private static function _operator_op_Modulus(d1:Decimal,d2:Decimal):Decimal;</span><br></pre></td></tr></table></figure><p>如下代码<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1:Decimal = <span class="keyword">new</span> Decimal(<span class="number">77</span>);</span><br><span class="line"><span class="keyword">var</span> d2:Decimal = <span class="keyword">new</span> Decimal(<span class="number">65</span>);</span><br><span class="line"></span><br><span class="line">trace(<span class="string">"d1 % d2 ="</span>,d1 % d2);</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d1 % d2 = 12</span><br></pre></td></tr></table></figure></p><blockquote><p>委托的操作符重载有 +和-。因此+=和-=是可用的。但是需要注意一点，如果委托变量为null,则不能直接使用+=,必须使用=进行赋值。当变量不为null时，可用+=,-=来操作多路委托。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;.net API可以由SDK中的工具LinkCodeGen.exe进行导出。但是由于语言限制，某些类型是无法被导出的。&lt;/p&gt;
&lt;h4 id=&quot;不能被导出的类型&quot;&gt;&lt;a href=&quot;#不能被导出的类型&quot; class=&quot;headerlink&quot; title=&quot;不能被导出的类型&quot;
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_2useas3" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-2useas3/"/>
    
    
  </entry>
  
  <entry>
    <title>新增语言特性</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-6-0-newfeature-2018-03-20/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-6-0-newfeature-2018-03-20/</id>
    <published>2018-03-20T10:29:36.000Z</published>
    <updated>2018-03-27T10:15:04.834Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的和.net之间互相调用，ActionScript3系统新增了一些语言特性。</p><h3 id="枚举器接口"><a href="#枚举器接口" class="headerlink" title="枚举器接口"></a>枚举器接口</h3><p>这个功能是Apple Juice系统新增的。  </p><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><p>如下枚举器接口是内置的:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">package</span> <span class="title">system</span>.<span class="title">collections</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * @author </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[_IEnumerator_]</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEnumerator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> <span class="title">current</span><span class="params">()</span>:*</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveNext</span><span class="params">()</span>:Boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span><span class="params">()</span>:void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>凡是实现此接口的对象都可用for each 或者 for in 语法遍历。</p><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>系统新增加了一个关键字:yield。它可用自动将一个function的返回值包装成为Ienumerator接口。见如下代码</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionEnumerator = <span class="function"><span class="keyword">function</span><span class="params">(count:int)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j:int = <span class="number">0</span>; j &lt; count; j++) </span><br><span class="line">&#123;</span><br><span class="line">yield <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> (<span class="keyword">var</span> k <span class="keyword">in</span> functionEnumerator(<span class="number">5</span>)) </span><br><span class="line">&#123;</span><br><span class="line">trace(<span class="string">"k:"</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">k: 0</span><br><span class="line">k: 1</span><br><span class="line">k: 2</span><br><span class="line">k: 3</span><br><span class="line">k: 4</span><br></pre></td></tr></table></figure></p><h4 id="枚举器转换"><a href="#枚举器转换" class="headerlink" title="枚举器转换"></a>枚举器转换</h4><p>Apple Juice在.net部分定义了一个Iterator类型。<br>这个类型本身实现了System.Collections.IEnumerator接口，同时又可以操作ActionScript3脚本的枚举器接口。因此，可以作为ActionScript3和.net之间的枚举器的桥梁。<br>使用ActionScript3的强制类型转换语法 Iterator()，将脚本对象包装成.net对象。当.net类库需要接收System.Collections.IEnumerator接口时，可以用它来包装脚本。</p><blockquote><p>典型的使用场合：Unity中使用协程时，可以直接在脚本中定义IEnumerator对象，然后用Iterator包装后传给Unity。参加如下代码：先使用GameObject.find找到MonoBehaviour对象，然后用MonoBehaviour的startCoroutine方法启动一个协程。这个协程可以直接在脚本中定义。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mono:MonoBehaviour = GameObject.find(<span class="string">"AS3Player"</span>).getComponent(MonoBehaviour) <span class="keyword">as</span> MonoBehaviour;</span><br><span class="line">trace(mono.name);</span><br><span class="line">mono.startCoroutine( Iterator(  </span><br><span class="line">(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">trace(<span class="string">"a"</span>,Time.frameCount);</span><br><span class="line"></span><br><span class="line">yield <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">trace(<span class="string">"b"</span>,Time.frameCount);</span><br><span class="line"></span><br><span class="line">yield <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">trace(<span class="string">"c"</span>,Time.frameCount);</span><br><span class="line">yield <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">)()</span><br><span class="line">));</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>.net类库中，既有值类型也有引用类型。结构体是值类型。<br>.net中，直接基于值类型的变量包含值。 将一个值类型变量分配给另一个值类型变量将复制包含的值。 这不同于分配引用类型变量，后者复制对对象的引用，但不复制对象本身。<br>绝大多数脚本语言都没有值类型，只有引用类型。因此，Apple Juice新增了对值类型的处理。</p><ul><li>值类型不能在脚本中定义，但是如果.net类库中的某个类型是值类型，那么导入后它保持了值类型的特性。</li><li>在Apple Juice ActionScript3中,如果将一个值类型的变量赋值给另一个变量，那么将会把变量的值复制给另一个变量。</li><li>未赋值的值类型变量默认值为null。</li><li>综上，值类型导入脚本后，相当于.net中的System.Nullable<t>类型</t></li></ul><p>见如下代码:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v1:Vector3 = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> v2:Vector3;</span><br><span class="line"></span><br><span class="line">trace(<span class="string">"v2:"</span>,v2);</span><br><span class="line">v2 = v1;</span><br><span class="line">trace(<span class="string">"v2:"</span>,v2);</span><br><span class="line"></span><br><span class="line">v2.z = <span class="number">999</span>;</span><br><span class="line">trace(<span class="string">"v2:"</span>,v2,<span class="string">"v1:"</span>,v1);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2未赋值，默认为null</span></span><br><span class="line">v2: <span class="literal">null</span></span><br><span class="line"><span class="comment">//v2的值从v1复制过来</span></span><br><span class="line">v2: (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">100.0</span>)</span><br><span class="line"><span class="comment">//由于v2的值是复制得来的，改变并未对v1造成影响。</span></span><br><span class="line">v2: (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">999.0</span>) v1: (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">100.0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了更好的和.net之间互相调用，ActionScript3系统新增了一些语言特性。&lt;/p&gt;
&lt;h3 id=&quot;枚举器接口&quot;&gt;&lt;a href=&quot;#枚举器接口&quot; class=&quot;headerlink&quot; title=&quot;枚举器接口&quot;&gt;&lt;/a&gt;枚举器接口&lt;/h3&gt;&lt;p&gt;这个功能是App
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_2useas3" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-2useas3/"/>
    
    
  </entry>
  
  <entry>
    <title>类型转换</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-5-0-useactionscript-2018-03-20/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-5-0-useactionscript-2018-03-20/</id>
    <published>2018-03-20T08:43:01.000Z</published>
    <updated>2018-03-27T10:14:58.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>ActionScript3内置有一些数据类型。当调用.net类库时，脚本系统会自动将它们进行转换成.net的相应类型传递给.net类库。<br>当.net类库返回值时，脚本系统也会将它转换为ActionScript3类型。下面说明了基础类型的转换:</p><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>对应C#的bool。</p><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><p>对应C#的int。</p><blockquote><p>当.net类库需要接收short时，系统会自动转换为short。<br>当.net类库返回short时，系统会自动转换回 ActionScript3的int。</p></blockquote><h4 id="uint"><a href="#uint" class="headerlink" title="uint"></a>uint</h4><p>对应C#的uint。</p><blockquote><p>当.net类库需要接收ushort时，系统会自动转换为ushort。<br>当.net类库返回ushort时，系统会自动转换回 ActionScript3的uint。</p></blockquote><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>对应C#的double。</p><blockquote><p>当.net类库需要接收float时，系统会自动转换为float。<br>当.net类库返回float时，系统会自动转换回 ActionScript3的Number。</p></blockquote><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>对应C#的string。</p><h3 id="保留类型"><a href="#保留类型" class="headerlink" title="保留类型"></a>保留类型</h3><p>ActionScript3语言中有些类型是ActionScript3特有的。<br>它们不能被转换成.net的类型。</p><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>ActionScript3中的Array是特殊的。他事实上是一个键值对类型，并非其他编程语言的数组。<br>因此，Array只在脚本内部使用。<br>.net的数组被作为API导入到脚本系统内。.net的System.Array的各种方法都被导入，可用于操作.net数组。</p><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>ActionScript3中的Object是ActionScript3类型的基类。导入的.net的类库的基类是.net中的System.Object。System.Object导入到ActionScript3中成为 system.<em>Object</em>,同样也继承自ActionScript3的Object。  </p><blockquote><p>当调用.net类库时，如果是导入的类型，系统会自动转换成.net类型，否则将会发生类型错误。<br>当.net类库返回某个类型的值时，如果是这个类型导出过API，则系统能自动识别并在脚本中使用，否则将导致类型错误。</p></blockquote><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p>ActionScript3中可用 “*” 来表示任意类型。如果在脚本中这么做，则将丧失编译时类型检查，类型检查将在运行时进行。</p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>ActionScript3中的任何function都是一个Function对象。</p><blockquote><p>当.net类库需要接收一个委托时，将一个function作为参数传递过去，系统会自动将其包装成一个委托。<br>当.net类库接收到这个委托后，当.net类库内部调用这个委托时，系统会将.net传递的参数转换成相应的ActionScript3对象并传递给此Function对象并调用。如果参数不匹配，则会引发异常。<br>因此，把function作为参数传递给.net时，还是需要注意函数参数和返回值的匹配。<br>如下代码演示如何给UGUI的Button添加响应。 </p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn:Button = Button( GameObject.find(<span class="string">"Button"</span>).getComponent(Button));</span><br><span class="line"></span><br><span class="line">btn.onClick.addListener(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">trace(<span class="string">"Clicked!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>ActionScript3中的Class,当被作为参数传递给.net时，系统将会将它转换成对应的System.Type对象。<br>只有从.net导入的API类型才有此对应关系。如果不是从.net导入的类型，转换时会产生错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h3&gt;&lt;p&gt;ActionScript3内置有一些数据类型。当调用.net类库时，脚本系统会自动将它们进行转换成.net的相应类型传递给.
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_2useas3" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-2useas3/"/>
    
    
  </entry>
  
  <entry>
    <title>API导出工具</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-4-0-linkcodegenconfig-2018-03-20/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-4-0-linkcodegenconfig-2018-03-20/</id>
    <published>2018-03-20T06:55:49.000Z</published>
    <updated>2018-03-27T10:14:51.527Z</updated>
    
    <content type="html"><![CDATA[<p>API导出工具LinkCodeGenCLI.exe在SDK目录中的/linkcodegencli子目录下。<br>这是一个控制台程序。可以接收如下参数:<br>config=&lt;configfilename&gt;.xml 来指定一个配置文件。<br>ActionScript3项目中，默认生成的配置文件是 genapi.config.xml。  </p><p>执行bat/CreateUnityAPI.bat将会重新生成API文档，并生成Unity工程中的API注册代码。</p><p>主要配置节有：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appSettings</span>&gt;</span><span class="comment">&lt;!--配置SDK，代码文件等的路径--&gt;</span><span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includelibcode</span>&gt;</span><span class="comment">&lt;!--一同编译的类库代码--&gt;</span><span class="tag">&lt;/<span class="name">includelibcode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buildassemblys</span>&gt;</span><span class="comment">&lt;!--要导出API的程序集--&gt;</span><span class="tag">&lt;/<span class="name">buildassemblys</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resolvepath</span>&gt;</span><span class="comment">&lt;!--依赖程序集的查找位置--&gt;</span><span class="tag">&lt;/<span class="name">resolvepath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">skipcreatortypes</span>&gt;</span><span class="comment">&lt;!--指定已手工创建API的类型--&gt;</span><span class="tag">&lt;/<span class="name">skipcreatortypes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">notcreatenamespace</span>&gt;</span><span class="comment">&lt;!--指定哪些命名空间的类型不会被导出--&gt;</span><span class="tag">&lt;/<span class="name">notcreatenamespace</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">notcreatetypes</span>&gt;</span><span class="comment">&lt;!--指定哪些类型不会被导出--&gt;</span><span class="tag">&lt;/<span class="name">notcreatetypes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">notcreatemembers</span>&gt;</span><span class="comment">&lt;!--指定哪些类型成员不会被导出--&gt;</span><span class="tag">&lt;/<span class="name">notcreatemembers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="appSettings"><a href="#appSettings" class="headerlink" title="appSettings"></a>appSettings</h4><p>配置各种文件的输出路径和输入路径。</p><ul><li>csharpcodepath  ActionScript3引擎要调用.net类库需要有对应的调用代码。每一个.net的Type,都会对应一个代码文件。指定这些文件的输出目录。</li><li>csharpcodenamespace  输出的API调用代码的命名空间.</li><li>regfunctioncodefile  当ActionScript3引擎启动时需要注册前面生成的调用代码。这个文件包含了这些注册代码。</li><li><p>regfunctioncodenamespace 注册代码的命名空间</p><blockquote><p>以上配置如果改动，则相应需要改动Unity工程中的ActionScript3引擎加载代码。如无必要保持默认即可</p></blockquote></li><li><p>combiedcodefile 可以把csharpcodepath中配置的输出目录中的所有C#代码合并为一个文件。</p></li><li>sdkpath  指定SDK地址。默认值是auto。如果LinkCodeGenCLI.exe所在目录就在SDK目录的/linkcodegencli子目录中,则配置为auto就表示所在目录就在SDK目录中。</li><li>as3apipath 将.net类库转换为ActionScript3的代码。这些代码仅包含类型声明和调用函数的对应关系，FlashDevelop可读取这些代码作为智能提示。</li><li>as3libfile 将API编译成二进制字节码。由于API不会手工变动，因此编译一次以后直接加载即可。<blockquote><p>约定：这个文件必须在ActionScript项目的lib目录中，并且文件名为as3unitylib.cswc。 如果缺少此文件，则编译会失败并提示。</p></blockquote><h4 id="includelibcode"><a href="#includelibcode" class="headerlink" title="includelibcode"></a>includelibcode</h4>配置其他要预编译的ActionScript3代码。如果有些类库是ActionScript3代码编写的，并且不会频繁修改，则可以一起编译。默认包含SDK目录下的/as3corelib目录。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">includelibcode</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">value</span>=<span class="string">"$(sdkpath)\as3corelib"</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includelibcode</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="buildassemblys"><a href="#buildassemblys" class="headerlink" title="buildassemblys"></a>buildassemblys</h4><p>配置想要导出API的dll。每个<em>assembly</em>子节点配置一个dll。<em>assembly</em>子节点下还可以配置<em>type</em>节点，如果这么做了，那么只有配置的类型会被导出，否则将导出所有可以导出的类型。</p><blockquote><p>例如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">buildassemblys</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">value</span>=<span class="string">"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v3.5\Profile\Unity Full v3.5\System.dll"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span> <span class="attr">definetype</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"aa"</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span> <span class="attr">definetype</span>=<span class="string">"namespace"</span> <span class="attr">value</span>=<span class="string">"bb"</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">buildassemblys</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>只有名字叫aa的类型或者命名空间为bb的类型才会被导出，因此实际上不会有任何类型被导出。</p></blockquote><h4 id="resolvepath"><a href="#resolvepath" class="headerlink" title="resolvepath"></a>resolvepath</h4><p>配置dll的查找路径。当解析dll时，可能需要加载它依赖的dll,例如当加载ScriptAssemblies\Assembly-CSharp.dll时，可能需要到UnityAssemblies下查找UnityEngine.CoreModule.dll等。<br>在这里配置dll查找路径.如果有问题，还可以到Unity安装目录下去查找。</p><blockquote><p>要定位Unity的dll,请到Unity的安装目录下查找。<br>Unity工程的Library里面的dll有些读取时会引发BadImageFormatException异常。当发生这种情况时，请到Unity安装目录的/Editor/Data/Managed/目录下加载UnityEngine.dll, /Editor/Data/UnityExtensions/Unity/GUISystem/下加载UnityEngine.UI.dll。<br>Unity2017 v2之后,Unity将UnityEngine.dll拆成了许多小dll,其中工程目录Library/UnityAssemblies中的UnityEngine.dll是无法被加载的。<br>因此查找路径要注意顺序，先到安装目录下找，再到Library/UnityAssemblies中查找，否则可能会导致dll加载失败。</p></blockquote><h4 id="skipcreatortypes"><a href="#skipcreatortypes" class="headerlink" title="skipcreatortypes"></a>skipcreatortypes</h4><p>已经手工写过api的类型。由于某些类型比较特殊，需要特别对待以满足特殊需求，这些类型被在这里指明。当生成器遇到这些类型时，就不会为它们生成代码。</p><h4 id="notcreatenamespace"><a href="#notcreatenamespace" class="headerlink" title="notcreatenamespace"></a>notcreatenamespace</h4><p>配置的命名空间下的全部类型都不会被导出。任何引用，继承到它们的方法，类型都不会被导出。</p><h4 id="notcreatetypes"><a href="#notcreatetypes" class="headerlink" title="notcreatetypes"></a>notcreatetypes</h4><p>配置的类型不会被导出。任何引用，继承到它们的方法，类型都不会被导出。</p><h4 id="notcreatemembers"><a href="#notcreatemembers" class="headerlink" title="notcreatemembers"></a>notcreatemembers</h4><p>配置的成员在遇到时会被跳过。Unity在运行时，某些类型的某些成员会不可用。为此，只能在导出api时跳过这些成员。在这里配置这些成员。</p><blockquote><p>例如<br>UnityEngine.Light.areaSize在编辑器状态下可用，但是发布时候确不可用。因此，必须配置这些成员以在导出API时跳过。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;API导出工具LinkCodeGenCLI.exe在SDK目录中的/linkcodegencli子目录下。&lt;br&gt;这是一个控制台程序。可以接收如下参数:&lt;br&gt;config=&amp;lt;configfilename&amp;gt;.xml 来指定一个配置文件。&lt;br&gt;ActionScr
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_1configureproject" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-1configureproject/"/>
    
    
  </entry>
  
  <entry>
    <title>ActionScript3项目配置</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-3-0-projectconfig-2018-03-20/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-3-0-projectconfig-2018-03-20/</id>
    <published>2018-03-20T03:34:55.000Z</published>
    <updated>2018-03-27T10:14:43.171Z</updated>
    
    <content type="html"><![CDATA[<p>ActionScript3项目目录结构如下</p><blockquote><p>.<br>├─── as3_unity<br>├─── bat<br>│     ├───CompileCode.bat<br>│     └───CreateUnityAPI.bat<br>├─── bin<br>├─── lib<br>│     └───as3unitylib.cswc<br>├─── obj<br>│     └───&lt;projectname&gt;Config.xml<br>├─── src<br>│     └───Main.as<br>├─── application.xml<br>├─── genapi.config.xml<br>├─── ASRuntime_readme.txt<br>└─── &lt;projectname&gt;.as3proj  </p></blockquote><h4 id="lt-projectname-gt-as3proj"><a href="#lt-projectname-gt-as3proj" class="headerlink" title="&lt;projectname&gt;.as3proj"></a>&lt;projectname&gt;.as3proj</h4><p>项目配置文件。<br>其中配置了SDK的路径:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line"> ...  </span><br><span class="line"> <span class="tag">&lt;<span class="name">movie</span> <span class="attr">preferredSDK</span>=<span class="string">"F:\ASTool_UnityTest\publish\SDK1.0.0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>工程中的源码路径和类库路径<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">classpaths</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--src code--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">class</span> <span class="attr">path</span>=<span class="string">"src"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--api code--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">path</span>=<span class="string">"F:\ASTool_UnityTest\publish\SDK1.0.0\as3_commapi\api"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">class</span> <span class="attr">path</span>=<span class="string">"F:\ASTool_UnityTest\publish\SDK1.0.0\as3_commapi\sharpapi"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">class</span> <span class="attr">path</span>=<span class="string">"as3_unity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">classpaths</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h4><p>包含了几个有用的bat文件。  </p><ol><li>CompileCode.bat 如果没有安装FlashDevelop或者没有安装JAVA,则运行此bat可以编译代码并发布到Unity工程。</li><li>CreateUnityAPI.bat 运行此bat可以重新创建Unity API。</li></ol><h4 id="lib-as3unitylib-cswc"><a href="#lib-as3unitylib-cswc" class="headerlink" title="lib/as3unitylib.cswc"></a>lib/as3unitylib.cswc</h4><p>当创建Unity API时会自动编译生成此文件，这是一个预编译的ActionScript3 API字节码文件。当编译ActionScript3工程时，编译器会加载此文件对代码进行类型检查等操作。</p><h4 id="lt-projectname-gt-Config-xml"><a href="#lt-projectname-gt-Config-xml" class="headerlink" title="&lt;projectname&gt;Config.xml"></a>&lt;projectname&gt;Config.xml</h4><p>传递给编译器的工程配置文件。如果使用FlashDevelop,则每次编译时FlashDevelop会自动生成这个文件。但是，如果不使用FlashDevelop,则必须手工编辑此配置文件，然后用 bat/CompileCode.bat 进行编译。当然，第一次生成ActionScript3工程时，也会自动创建好这个文件，如果确保脚本代码都写在<br>src目录中，则无需对此进行修改。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">source-path</span> <span class="attr">append</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path-element</span>&gt;</span>F:\ASTool_UnityTest\AS3HotFixU47\HotFixProj\src<span class="tag">&lt;/<span class="name">path-element</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path-element</span>&gt;</span>F:\ASTool_UnityTest\publish\SDK1.0.0\as3_commapi\api<span class="tag">&lt;/<span class="name">path-element</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path-element</span>&gt;</span>F:\ASTool_UnityTest\publish\SDK1.0.0\as3_commapi\sharpapi<span class="tag">&lt;/<span class="name">path-element</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path-element</span>&gt;</span>F:\ASTool_UnityTest\AS3HotFixU47\HotFixProj\as3_unity<span class="tag">&lt;/<span class="name">path-element</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path-element</span>&gt;</span>D:\Program Files (x86)\FlashDevelop\Library\AS3\classes<span class="tag">&lt;/<span class="name">path-element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">source-path</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><p>源代码目录。</p><h4 id="genapi-config-xml"><a href="#genapi-config-xml" class="headerlink" title="genapi.config.xml"></a>genapi.config.xml</h4><p>API代码生成器的详细配置。这个工具可用来创建.net类库和ActionScript3之间交互的API。<br><a href="/apple-juice-actionscript/doc_cn/1-4-0-linkcodegenconfig-2018-03-20/" title="API配置说明">API配置说明</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ActionScript3项目目录结构如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.&lt;br&gt;├─── as3_unity&lt;br&gt;├─── bat&lt;br&gt;│     ├───CompileCode.bat&lt;br&gt;│     └───CreateUnityAPI.bat&lt;br
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_1configureproject" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-1configureproject/"/>
    
    
  </entry>
  
  <entry>
    <title>创建Unity工程和脚本工程</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-2-0-createunityproject-2018-03-19/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-2-0-createunityproject-2018-03-19/</id>
    <published>2018-03-19T11:22:04.000Z</published>
    <updated>2018-03-30T09:52:04.012Z</updated>
    
    <content type="html"><![CDATA[<p>先下载最新的发布包，并解压。解压后的目录内容如下:</p><blockquote><p>.<br>├─── SDK[X.X.X]<br>└─── UnityPackage<br>      └───AS3RuntimeForUnity.unitypackage</p></blockquote><h4 id="SDK-X-X-X"><a href="#SDK-X-X-X" class="headerlink" title="SDK[X.X.X]"></a>SDK[X.X.X]</h4><blockquote><p>是一个自定义的 AIRSDK.可被FlashDevelop识别并加载，使用它来进行代码的编译和发布。</p></blockquote><h4 id="UnityPackage"><a href="#UnityPackage" class="headerlink" title="UnityPackage"></a>UnityPackage</h4><blockquote><p>内含Unity插件包 “AS3RuntimeForUnity.unitypackage”。  </p></blockquote><p>项目创建步骤:</p><ol><li>先创建一个Unity工程。然后导入UnityPackage内的Unity插件包。</li><li>点击菜单 ASRuntime/Create ActionScript3 FlashDevelop HotFixProj。</li><li>根据提示先定位SDK的位置。</li><li>然后根据提示创建AS3热更新项目。项目创建完成后，会根据默认配置生成Unity的API。  <blockquote><p>ActionScript3项目要求创建在一个空白的文件夹中。</p></blockquote></li></ol><p>项目测试：</p><ol><li>在Unity工程中，打开测试场景”Assets/HotFixDemoScene1.scene”。</li><li>在刚才生成的ActionScript3工程目录中，用FlashDevelop打开<protname>.as3proj 工程文件。</protname></li><li>在AS3工程中修改代码</li><li>点击FlashDevelop的编译按钮,进行编译</li><li>回到Unity工程，点击播放，即可看到修改的结果。</li></ol><p><strong>下面是一个gif动态示意图，如果没有显示，请稍等片刻</strong><br><img src="/apple-juice-actionscript/doc_cn/images/as3_unity_demo4.gif" alt="动态说明"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先下载最新的发布包，并解压。解压后的目录内容如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.&lt;br&gt;├─── SDK[X.X.X]&lt;br&gt;└─── UnityPackage&lt;br&gt;      └───AS3RuntimeForUnity.unitypackage&lt;/p&gt;

      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
      <category term="1_1configureproject" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/1-1configureproject/"/>
    
    
  </entry>
  
  <entry>
    <title>概述</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-1-0-overview-2018-03-19/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/1-1-0-overview-2018-03-19/</id>
    <published>2018-03-19T11:21:45.000Z</published>
    <updated>2018-03-28T08:59:18.928Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Apple-Juice"><a href="#什么是Apple-Juice" class="headerlink" title="什么是Apple Juice?"></a>什么是Apple Juice?</h4><p>Apple Juice是一个纯 .net2.0 代码实现的ActionScript3引擎。<br>设计之初就是为了能够离线的编译ActionScript3代码，并且在任意有.net2.0运行环境的场合执行。<br>目前，最典型的应用场合就是在Unity3D的应用中执行ActionScrpt3脚本。</p><h4 id="什么是ActionScript3"><a href="#什么是ActionScript3" class="headerlink" title="什么是ActionScript3"></a>什么是ActionScript3</h4><p>ActionScript3就是事实上的ECMAScript4的唯一实现。主要运行于Adobe Flash Player和Adobe AIR环境。是一门面向对象的编程语言，同时又兼容JS的动态语言特性。我们用.net2.0 实现了一个ActionScript3引擎，可以在更多的环境下执行ActionScript3脚本。<br><a href="https://www.adobe.com/devnet/actionscript/learning.html" rel="external nofollow noopener noreferrer" target="_blank">这里是ActionScript3的语言参考</a></p><h4 id="为什么要在Unity中运行"><a href="#为什么要在Unity中运行" class="headerlink" title="为什么要在Unity中运行"></a>为什么要在Unity中运行</h4><p>Unity是一个跨平台的3D游戏引擎。它使用C#语言进行开发工作。本脚本引擎提供了让Unity执行ActionScript3代码的能力。并且不受其他环境因素限制，只要Unity发布的App可以运行，则ActionScript3就可以运行。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>Apple Juice提供了如下功能：</p><ol><li>ActionScript3编译器。它离线编译您的ActionScript3代码，并生成一个二进制字节码文件。</li><li>除了极个别特例外，所有ActionScript3语法都有支持。包括类型，接口，数据类型，编译时期强类型检查,dynamic动态类型，prototype原型链扩展等等。以下为明确不支持的语法特性:</li></ol><ul><li>namespace ActionScript3中，命名空间可用于控制对类中的一组属性和方法的访问。本脚本系统仅支持public protected private 等内置访问修饰符，自定义namespace功能不支持。</li><li>ECMAScript for XML(E4X) 内嵌XML以及E4X相关操作符等功能明确不支持。</li></ul><ol><li>Apple Juice ActionScript3脚本可以调用其他.net类库提供的公开功能。因此Unity的API也可被调用。由于ActionScript3本身拥有完整的编译时期类型检查和完整的类型继承系统，因此.net类库的结构可以被大部分完整的映射到ActionScript3中。Apple Juice提供了API代码生成工具，可以自动的将需要的API生成到ActionScript3工程。</li><li>一旦API生成后，就可以在ActionScript3脚本中对Unity类库进行操作。编译器在编译时能做出类型检查，提前发现代码中的错误。强类型系统能提高脚本的执行性能。一旦编译通过，编译器会生成一个二进制字节码文件。这个文件可以直接部署到Unity工程中，也可以部署到网络上按需要下载。</li><li>ActionScript3运行时。是一个纯C#编写的类库，可以直接在Unity项目中使用。Unity启动时，先创建ActionScript3运行时实例，再注册上一步生成的API,然后加载编译好的二进制字节码，即可执行脚本。<blockquote><p>这个二进制字节码可以从任意地方加载，比如从网络下载，等等</p></blockquote></li></ol><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>可以在这里下载最新的运行时和Unity插件。<br><a href="https://github.com/asheigithub/apple-juice-actionscript" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/asheigithub/apple-juice-actionscript</a></p><h4 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h4><p>要运行Apple Juice很简单，不过在用它编写Unity脚本前，要注意最好有以下环境:  </p><ul><li><a href="http://www.flashdevelop.org/" title="FlashDevelop" rel="external nofollow noopener noreferrer" target="_blank">FlashDevelop</a> 推荐的ActionScript3 IDE.</li><li><a href="https://www.java.com" rel="external nofollow noopener noreferrer" target="_blank">JRE</a> FlashDevelop正常编译需要JRE支持。</li><li>.net framework2.0以上。目前的Windows版本应该都是自带的。</li><li>Windows. 目前Apple Juice的Unity编译工具流程时假设在Windows上运行的</li><li>Unity 4.X以上版本推荐5.X以上版本。 插件中的Demo场景是搭建于Unity5.6的，但是Apple Juice ActionScript3引擎确实能在Unity 4.7上正常运行。</li></ul><blockquote><p>其中JAVA和FlashDevelop不是必须的，如果不安装IDE,则您需要用其他任意文本编辑器来编写代码，并手动执行一个编译的批处理命令来进行编译和发布。但是，FlashDevelop可以提供如智能感知，自动补全，错误提示，代码格式化等等方便的功能。为了方便起见，建议安装JRE和FlashDevelop。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;什么是Apple-Juice&quot;&gt;&lt;a href=&quot;#什么是Apple-Juice&quot; class=&quot;headerlink&quot; title=&quot;什么是Apple Juice?&quot;&gt;&lt;/a&gt;什么是Apple Juice?&lt;/h4&gt;&lt;p&gt;Apple Juice是一个纯 .net
      
    
    </summary>
    
      <category term="1_beginuse" scheme="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/categories/1-beginuse/"/>
    
    
  </entry>
  
  <entry>
    <title>欢迎</title>
    <link href="https://asheigithub.github.io/apple-juice-actionscript/doc_cn/index-2018-03-16/"/>
    <id>https://asheigithub.github.io/apple-juice-actionscript/doc_cn/index-2018-03-16/</id>
    <published>2018-03-16T10:41:21.000Z</published>
    <updated>2018-03-30T09:49:30.478Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎使用 <a href="https://github.com/asheigithub/apple-juice-actionscript" title="这是一个ActionScript3 编译器和虚拟机" rel="external nofollow noopener noreferrer" target="_blank">Apple Juice</a><br>这是一个纯 .net2.0实现的ActionScript3 编译器和虚拟机。</p><blockquote><p>支持除了 namespace 和 with 和 E4X XML操作外的一切actionscript3语法特性。   </p></blockquote><blockquote><p>可以将actionscript3代码编译为字节码，然后加载并动态执行。VM由纯C# 2.0代码实现，可以直接让Unity来读取并执行生成的字节码，就是可用Unity完成热更新操作。<br>编译器部分实现了完整的编译期类型检查。并且有完整的错误提示。已经和FlashDevelop完成了集成，可以直接在FlashDevelop中开发并一键编译发布到Unity。<br>Unity的API或者自己开发的C# API提供了工具直接转换为actionscript api文件和对接代码，并且直接注册到FlashDevelop工程中。</p></blockquote><h4 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h4><ul><li>对.net的结构体有特殊优化。在脚本中只要在方法的局部变量中使用，可以任意的new而不会导致gc.因此使用UnityEngine.Vector3之类类型时，可以放心使用。</li><li>对导出的类型有特殊优化。只要在方法的局部变量中使用，则脚本本身不产生额外的对象分配。</li><li><p>实现操作符重载。导出的对象如果有操作符重载，则在脚本中同样可以使用。如下代码是完全合法的。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cube.transform.localPosition += v * Time.deltaTime;</span><br></pre></td></tr></table></figure></li><li><p>可以使用yield语句返回一个IEnumerator,然后用Iterator包装为.net的IEnumerator接口。所以可以直接在脚本中写Unity的协程。如如下代码所示:  </p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mono:MonoBehaviour = GameObject.find(<span class="string">"AS3Player"</span>).getComponent(MonoBehaviour) <span class="keyword">as</span> MonoBehaviour;</span><br><span class="line">trace(mono.name);</span><br><span class="line">mono.startCoroutine( Iterator(  </span><br><span class="line">(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">trace(<span class="string">"a"</span>,Time.frameCount);</span><br><span class="line"></span><br><span class="line">yield <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">trace(<span class="string">"b"</span>,Time.frameCount);</span><br><span class="line"></span><br><span class="line">yield <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">trace(<span class="string">"c"</span>,Time.frameCount);</span><br><span class="line">yield <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">)()</span><br><span class="line">));</span><br></pre></td></tr></table></figure></li><li><p>自动将.net 委托对应到ActionScript3的function对象。例如:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn:Button = Button( GameObject.find(<span class="string">"Button"</span>).getComponent(Button));</span><br><span class="line">btn.onClick.addListener(</span><br><span class="line">onclick</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">btn.onClick.addListener(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">trace(<span class="string">"hahaha"</span>,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>自动处理.net 类库中的 out ref类型的参数。这样的方法也可自动导出。例如 long.TryParse:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* System.Int64.TryParse</span></span><br><span class="line"><span class="comment">*parameters:</span></span><br><span class="line"><span class="comment">*  s : System.String</span></span><br><span class="line"><span class="comment">*  result : (Out)System.Int64</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.Boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,static_system_Int64_tryParse];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tryParse</span><span class="params">(s:String,result:Int64,refout:as3runtime.RefOutStore)</span>:Boolean</span>;</span><br></pre></td></tr></table></figure></li><li><p>可以在ActionScript3脚本中继承.net类库。如以下脚本，在脚本中自定义了一个MonoBehaviour,然后创建100个物体，并将此对象挂在这些物体上。</p></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> isstop:Boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Define a subclass of MonoBehaviour</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyB</span> <span class="keyword">extends</span> <span class="title">MonoBehaviour</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> v:Vector3;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Awake</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v = <span class="keyword">new</span> Vector3(Random.range( <span class="number">-5</span>, <span class="number">5</span>), Random.range( <span class="number">-5</span>, <span class="number">5</span>), Random.range( <span class="number">-5</span>, <span class="number">5</span>));</span><br><span class="line">v.normalize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isstop)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vv:Vector3 = <span class="keyword">new</span> Vector3(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">gameObject.transform.localPosition += v * Time.deltaTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p:Vector3 = gameObject.transform.localPosition;</span><br><span class="line"><span class="keyword">if</span> (p.x &lt;<span class="number">-5</span> || p.y &lt; <span class="number">-5</span> || p.z &lt; <span class="number">-5</span> || p.x &gt; <span class="number">5</span> || p.y &gt; <span class="number">5</span> || p.z &gt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">v =-v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cube:UObject = GameObject.find(<span class="string">"Cube"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i:int = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> c2:GameObject = GameObject.createPrimitive( PrimitiveType.Cube); <span class="comment">//UObject.instantiate__(cube) as GameObject;</span></span><br><span class="line">MeshRenderer( c2.getComponent(MeshRenderer)).material = MeshRenderer( GameObject( cube).getComponent(MeshRenderer)).material;</span><br><span class="line">c2.transform.position = <span class="keyword">new</span> Vector3( Random.range(<span class="number">-5</span>,<span class="number">5</span>),Random.range(<span class="number">0</span>,<span class="number">5</span>),Random.range(<span class="number">-5</span>,<span class="number">5</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mount the MonoBehaviour just defined on the object</span></span><br><span class="line">c2.addComponent(MyB);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn:Button = Button( GameObject.find(<span class="string">"Button"</span>).getComponent(Button));</span><br><span class="line">btn.onClick.addListener(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">isstop = !isstop;</span><br><span class="line">trace(<span class="string">"isstop?"</span> , isstop);</span><br><span class="line">Text( GameObject.find(<span class="string">"Canvas/Text"</span>).getComponent(Text)).text = <span class="string">"isstop?"</span> + isstop +<span class="string">"我在AS3中热更"</span>;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>完整的编译期类型检查。脚本有完整的编译时类型检查，利于错误排查。</li><li>完全实现的面向对象支持。完整支持类继承和接口。</li><li>FlashDevelop IDE支持。可以完全利用IDE的智能提示，编译错误也可在IDE中得到反馈。可在IDE中直接编译热更新代码成到Unity项目</li></ul><h4 id="api全自动导出"><a href="#api全自动导出" class="headerlink" title="api全自动导出"></a>api全自动导出</h4><blockquote><p>自动将.net类库导出给脚本使用。并且保留有原始类型信息。例如<strong>UnityEngine.Avatar</strong>导出后的api形式为:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">package</span> <span class="title">unityengine</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Sealed</span></span><br><span class="line"><span class="comment">*  UnityEngine.Avatar</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[no_constructor]</span><br><span class="line">[link_system]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Avatar</span> <span class="keyword">extends</span> <span class="title">UObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">[creator];</span><br><span class="line">[<span class="keyword">native</span>,unityengine_Avatar_creator];</span><br><span class="line">private static function _creator(type:Class):*;</span><br><span class="line">[<span class="keyword">native</span>,$$_noctorclass];</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Avatar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//*********公共方法*******</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* UnityEngine.Avatar.get_isValid</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.Boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,unityengine_Avatar_get_isValid]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span> <span class="title">isValid</span><span class="params">()</span>:Boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* UnityEngine.Avatar.get_isHuman</span></span><br><span class="line"><span class="comment">*return:</span></span><br><span class="line"><span class="comment">*   System.Boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="keyword">native</span>,unityengine_Avatar_get_isHuman]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span> <span class="title">isHuman</span><span class="params">()</span>:Boolean</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>IDE能提供智能感知提示。</p></blockquote><blockquote><p>自动导出的API为actionscript3风格。比如<strong>UnityEngine.UI.Button</strong> 将被导出为 <strong>unityengine.ui.Button</strong></p></blockquote><blockquote><p>能将.net 类库中的类型包含继承关系和接口实现关系的导出。例如，<strong>UnityEngine.MeshRenderer</strong>  继承自 <strong>UnityEngine.Renderer</strong>  。那么导出后的as3类型也会保持以上的关系。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎使用 &lt;a href=&quot;https://github.com/asheigithub/apple-juice-actionscript&quot; title=&quot;这是一个ActionScript3 编译器和虚拟机&quot; rel=&quot;external nofollow noopener 
      
    
    </summary>
    
    
  </entry>
  
</feed>
