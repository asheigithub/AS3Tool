package
{
	/*
	不要在这个类里编写属性访问器
	*/

	public class __buildin__
	{
		[native,__buildin__ismethod]
		public static function _ismethod_(f:Function):Boolean;

		[native,__buildin__trace]
		public static function trace(...rest):void;

		[native,__buildin__isnan]
		public static function isNaN(value:Number):Boolean;

		[native,__buildin__isfinite]
		public static function isFinite(value:Number):Boolean;

		[native,__buildin__parseint]
		public static function parseInt(str:String="NaN", radix:uint = 0):Number;

		[native,__buildin__parsefloat]
		public static function parseFloat(str:String="NaN"):Number;



		//***flash.utils***
		[native,_flash_util_functions_getDefinitionByName]
		public static function flash_utils_getDefinitionByName (name:String) : *;
		[native,flash_utils_functions_getQualifiedClassName]
		public static function flash_utils_getQualifiedClassName (value:*) : String;


		//****工具程序*****
		private static function _getMethod(obj:*,name:String):Function
		{
			return obj[name];
		}

		private static function _createInstance(cls:Class,args:int,...para):Object
		{
			if(args==0)
			{
				return new cls();
			}
			else if(args==1)
			{
				return new cls(para[0]);
			}
			else if(args==2)
			{
				return new cls(para[0],para[1]);
			}
			else if(args==3)
			{
				return new cls(para[0],para[1],para[2]);
			}
			else if(args==4)
			{
				return new cls(para[0],para[1],para[2],para[3]);
			}
			else if(args==5)
			{
				return new cls(para[0],para[1],para[2],para[3],para[4]);
			}
			else
			{
				throw new Error("大于5个参数的构造还没写呢");
				null;
			}

		}



		//根据路径访问成员
		private static function _getMemberValue(obj:Object, p1:String=null,p2:String=null, path:Array=null, indexArg:*=null):*
		{
			var p:* = obj; 
			
			if (p1 != null)
			{
				p = obj[p1];
			}
			if (p2 != null)
			{
				p = p[p2];
			}
			
			if (path != null)
			{
				for (var i:int = 0; i < path.length; i++) 
				{
					p = p[String(path[i])];
				}
			}
			
			if (indexArg != null)
			{
				return p[indexArg];
			}
			else
			{
				return p;
			}
			
		}


		//根据路径给成员赋值
		private static function _setMemberValue(obj:Object, value:*, p1:String=null, path:Array=null, indexArg:*=null):void
		{
			var p:* = obj; 
			
			if (p1 == null)
			{
				if (indexArg != null)
				{
					p[indexArg]=value;
				}
				else
				{
					p=value;
				}
				
				return;
			}
			
			if (p1 != null)
			{
				if (path == null || path.length==0)
				{
					if (indexArg != null)
					{
						p[p1][indexArg]=value;
					}
					else
					{
						p[p1]=value;
					}
					
					return;
				}
				else
				{
					p = obj[p1];
				}
			}
			
			if (path != null && path.length>0)
			{
				for (var i:int = 0; i < path.length-1; i++) 
				{
					p = p[String(path[i])];
				}
				
				if (indexArg != null)
				{
					p[path[path.length-1]][indexArg]=value;
				}
				else
				{
					p[path[path.length-1]]=value;
				}
				
			}
		}


	}
}