package
{
	public dynamic class Array extends Object
	{
		/**
		 * 指定 Array 类排序方法为不区分大小写的排序。您可以对 sort() 方法或 sortOn() 方法中的 options 参数使用此常数。 
		 * 此常数的值为 1。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		public static const CASEINSENSITIVE : uint = 1;

		/**
		 * 指定 Array 类排序方法为降序排序。您可以对 sort() 方法或 sortOn() 方法中的 options 参数使用此常数。 
		 * 此常数的值为 2。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		public static const DESCENDING : uint = 2;

		/**
		 * 指定 Array 类排序方法为数值（而不是字符串）排序。在 options 参数中包括此常数会导致 sort() 方法和 sortOn() 方法将数字作为数值排序，而不是作为数字字符的字符串排序。如果不使用 NUMERIC 常数，则排序将每个数组元素视为一个字符串，并且按照 Unicode 顺序生成结果。
		 * 
		 *   例如，以值为 [2005, 7, 35] 的数组为例，如果 NUMERIC 常数未包括在 options 参数中，则排序后的数组为 [2005, 35, 7]，但如果包括了 NUMERIC 常数，则排序后的数组为 [7, 35, 2005]。 此常数仅应用于数组中的数字；不应用于包含数值数据（如 ["23", "5"]）的字符串。此常数的值为 16。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		public static const NUMERIC : uint = 16;

		/**
		 * 指定排序返回的数组包含数组索引。可以将此常数用于 sort() 或 sortOn() 方法中的 options 参数，以便您能够访问数组元素的多个视图，同时又不修改原始数组。 
		 * 此常数的值为 8。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		public static const RETURNINDEXEDARRAY : uint = 8;


		/**
		 * 指定 Array 类排序方法的唯一排序要求。您可以对 sort() 方法或 sortOn() 方法中的 options 参数使用此常数。如果任何两个要排序的元素或字段的值相同，唯一排序选项就会终止排序。 
		 * 此常数的值为 4。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		public static const UNIQUESORT : uint = 4;


		private var _array:Array;

		[native,_array_constructor]
		public function Array (...rest);

		[implicit_to]
		private static function _to_array(thisObj:*):Array{ return thisObj._v;}

		
		[explicit_from];
		private static function _explicit_from_value(...rest):*
		{
			var result:*
				=new Array();
				_fill(result,rest);
			
			return result;
		}

		[implicit_from];
		private static function _from_value(value:Array):*
		{
			
			if(value==null)
			{
				return null;
			}
			

			var result:*=_loadArrayObject(value);
			if(result==null)
			{
				result=new Array();
				_fill(result,value);
			}
			return result;
		}

		[native,_array_fill]
		private static function _fill(tofill:*,value:Array):void;
		[native,_array_load]
		private static function _loadArrayObject(value:Array):*;


		public function some (callback:Function, thisObject:*=null) : Boolean
		{
			if(callback==null) return;

			if(thisObject !=null && _ismethod_(callback) )
			{
				throw "When the callback argument is a method of a class, the optional this argument must be null.";
			}

			var len:uint = length;
			for(var i:int=0;i<len;i++)
			{
				var e:* = _array[i];
				if (callback.call(thisObject,e,i,_array))
					return true;
			}

			return false;
		}

		public function every (callback:Function, thisObject:*=null) : Boolean
		{
			if(callback==null) return;

			if(thisObject !=null && _ismethod_(callback) )
			{
				throw "When the callback argument is a method of a class, the optional this argument must be null.";
			}

			var len:uint = length;
			for(var i:int=0;i<len;i++)
			{
				var e:* = _array[i];
				if (!callback.call(thisObject,e,i,_array))
					return false;
			}

			return true;
		}



		public function forEach (callback:Function, thisObject:*=null) : void
		{
			if(callback==null) return;

			if(thisObject !=null && _ismethod_(callback) )
			{
				throw "When the callback argument is a method of a class, the optional this argument must be null.";
			}

			var len:uint = length;
			for(var i:int=0;i<len;i++)
			{
				var e:* = _array[i];
				callback.call(thisObject,e,i,_array);

			}
		}

		public function filter(callback:Function, thisObject:*=null) : Array
		{
			if(callback==null) return [];

			if(thisObject !=null && _ismethod_(callback) )
			{
				throw "When the callback argument is a method of a class, the optional this argument must be null.";
			}

			var result:Array=[];

			var len:uint = length;
			for(var i:int=0;i<len;i++)
			{
				var e:* = _array[i];
				if( callback.call(thisObject,e,i,_array))
				{
					result.push(e);
				}
			}

			return result;
		}

		public function map(callback:Function, thisObject:*=null) : Array
		{
			if(callback==null) return [];

			if(thisObject !=null && _ismethod_(callback) )
			{
				throw "When the callback argument is a method of a class, the optional this argument must be null.";
			}

			var result:Array=[];

			var len:uint = length;
			for(var i:int=0;i<len;i++)
			{
				var e:* = _array[i];
				result.push(callback.call(thisObject,e,i,_array));
			}

			return result;
		}

		/**
		 * 指定数组中元素数量的非负整数。在向数组中添加新元素时，此属性会自动更新。当您给数组元素赋值（例如，my_array[index] = value）时，如果 index 是数字，而且 index+1 大于 length 属性，则 length 属性会更新为 index+1。
		 * 注意：如果您为 length 属性所赋的值小于现有长度，会将数组截断。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_getlength];
		public function get length () : uint;

		[native,_array_setlength];
		public function set length (newLength:uint) : void;


		public function indexOf (searchElement:*, fromIndex:uint=0) : int
		{
			var l:uint=length;
			for(var i:uint=fromIndex;i<l;i++)
			{
				if( this[i]===searchElement )
				{
					return i;
				}
			}
			return -1;
		}

		public function lastIndexOf(searchElement:*, fromIndex:int = 0x7fffffff):int
		{
			var l:uint=length;
			fromIndex=fromIndex<l-1?fromIndex:l-1;
			

			for(var i:int=fromIndex;i>=0;i--)
			{
				if( this[i]===searchElement )
				{
					return i;
				}
			}
			return -1;
		}

		/**
		 * 将参数中指定的元素与数组中的元素连接，并创建新的数组。如果这些参数指定了一个数组，将连接该数组中的元素。如果不传递任何参数，则新数组是原始数组的副本（浅表克隆）。
		 * @param	args	要连接到新数组中的任意数据类型的值（如数字、元素或字符串）。
		 * @return	一个数组，其中包含此数组中的元素，后跟参数中的元素。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_concat];
		public function concat (...rest) : Array;


		[native,_array_insertAt];
		public function insertAt (index:int, element:*) : void;

		[native,_array_join];
		public function join (sep:*=null) : String;

		[native,_array_pop];
		public function pop () : *;

		/**
		 * 将一个或多个元素添加到数组的结尾，并返回该数组的新长度。
		 * @param	args	要追加到数组中的一个或多个值。
		 * @return	一个表示新数组长度的整数。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_push];
		public function push (...rest) : uint;
		[native,_array_removeat];
		public function removeAt (index:int) : *;

		/**
		 * 在当前位置倒转数组。
		 * @return	新数组。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_reverse]
		public function reverse () : Array;

		/**
		 * 删除数组中第一个元素，并返回该元素。其余数组元素将从其原始位置 i 移至 i-1。
		 * @return	数组中的第一个元素（可以是任意数据类型）。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_shift]
		public function shift () : *;


		/**
		 * 返回由原始数组中某一范围的元素构成的新数组，而不修改原始数组。返回的数组包括 startIndex 元素以及从其开始到 endIndex 元素（但不包括该元素）的所有元素。
		 * 
		 *   如果不传递任何参数，则新数组是原始数组的副本（浅表克隆）。
		 * @param	startIndex	一个数字，指定片段起始点的索引。如果 startIndex 是负数，则起始点从数组的结尾开始，其中 -1 指的是最后一个元素。
		 * @param	endIndex	一个数字，指定片段终点的索引。如果省略此参数，则片段包括数组中从开头到结尾的所有元素。如果 endIndex 是负数，则终点从数组的结尾指定，其中 -1 指的是最后一个元素。
		 * @return	一个数组，由原始数组中某一范围的元素组成。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_slice]
		public function slice (A:int=0, B:int=16777215) : Array;


		/**
		 * 给数组添加元素以及从数组中删除元素。此方法会修改数组但不制作副本。
		 * @param	startIndex	一个整数，它指定数组中开始进行插入或删除的位置处的元素的索引。您可以用一个负整数来指定相对于数组结尾的位置（例如，-1 是数组的最后一个元素）。
		 * @param	deleteCount	一个整数，它指定要删除的元素数量。该数量包括 startIndex 参数中指定的元素。如果没有为 deleteCount 参数指定值，则该方法将删除从 startIndex 元素到数组中最后一个元素的所有值。如果该参数的值为 0，则不删除任何元素。
		 * @param	values	用逗号分隔的一个或多个值的可选列表，此可选列表将插入 startIndex 参数中的指定位置处的数组中。如果插入的值是数组类型，则保持此数组的原样并将其作为单个元素插入。例如，如果您将长度为 3 的现有数组与另一长度为 3 的数组结合，则生成的数组将只包含 4 个元素。但是，其中的一个元素将是长度为 3 的一个数组。
		 * @return	一个数组，包含从原始数组中删除的元素。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_splice]
		public final function splice (startIndex:int=0, deleteCount:uint= 4294967295, ... values) : Array;


		/**
		 * 将一个或多个元素添加到数组的开头，并返回该数组的新长度。数组中的其他元素从其原始位置 i 移到 i+1。
		 * @param	args	一个或多个要插入到数组开头的数字、元素或变量。
		 * @return	一个整数，表示该数组的新长度。
		 * @langversion	3.0
		 * @playerversion	Flash 9
		 * @playerversion	Lite 4
		 */
		[native,_array_unshift]
		public function unshift (...rest) : uint;

		[native,_array_toString]
		public function toString():String;


	}
}