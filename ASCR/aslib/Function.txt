package
{
	[_function_]
	public final dynamic class Function extends Object
	{
		
		
		private var _func:Function;
		private var _prototype:Object;

		public function Function ()
		{
			_func=function():*{};
			_prototype = {constructor:this};

		}

		public function toString():String
		{
			return "function Function() {}";
		}


		[implicit_to]
		private static function _to_function(thisObj:*):Function{ return thisObj._func;}

		[implicit_from]
		private static function _from_value(value:Function):*
		{ 
			if(value==null)
			{
				return null;
			}

			var result:*=_loadFunctionObject(value);
			if(result==null)
			{
				result=new Function();
				_fill(result,value);
			}
			return result;
		}

		[explicit_from];
		private static function _explicit_from_value(v:Function):*
		{
			throw "The form function('function body') is not supported."
		}

		[novisual];
		[native,_function_fill]
		private static function _fill(tofill:*,value:Function):void;
		[novisual];
		[native,_function_load]
		private static function _loadFunctionObject(value:Function):*;



		
		public function get prototype () : *{ return _prototype};

		[native,_function_setPrototype]
		public function set prototype (p:*) : void;

		[native,_function_apply]
		public function apply (thisArg:*=null, argArray:Array=null) : *;
		
		[native,_function_call]
		public function call (thisArg:*=null, ...rest) : *;
		
		[native,_function_getlength]
		public function get length () : int;

	}
}
